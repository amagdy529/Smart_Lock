
Smart_Lock_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000622  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000111c  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a57  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 41 02 	call	0x482	; 0x482 <main>
  64:	0c 94 0f 03 	jmp	0x61e	; 0x61e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
  74:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <TWI_init>
}
  78:	cf 91       	pop	r28
  7a:	df 91       	pop	r29
  7c:	08 95       	ret

0000007e <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
  7e:	df 93       	push	r29
  80:	cf 93       	push	r28
  82:	00 d0       	rcall	.+0      	; 0x84 <EEPROM_writeByte+0x6>
  84:	00 d0       	rcall	.+0      	; 0x86 <EEPROM_writeByte+0x8>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
  90:	0e 94 f6 00 	call	0x1ec	; 0x1ec <TWI_start>
    if (TWI_getStatus() != TW_START)
  94:	0e 94 4e 01 	call	0x29c	; 0x29c <TWI_getStatus>
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	11 f0       	breq	.+4      	; 0xa0 <EEPROM_writeByte+0x22>
        return ERROR;
  9c:	1c 82       	std	Y+4, r1	; 0x04
  9e:	28 c0       	rjmp	.+80     	; 0xf0 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	80 70       	andi	r24, 0x00	; 0
  a6:	97 70       	andi	r25, 0x07	; 7
  a8:	88 0f       	add	r24, r24
  aa:	89 2f       	mov	r24, r25
  ac:	88 1f       	adc	r24, r24
  ae:	99 0b       	sbc	r25, r25
  b0:	91 95       	neg	r25
  b2:	80 6a       	ori	r24, 0xA0	; 160
  b4:	0e 94 11 01 	call	0x222	; 0x222 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
  b8:	0e 94 4e 01 	call	0x29c	; 0x29c <TWI_getStatus>
  bc:	88 31       	cpi	r24, 0x18	; 24
  be:	11 f0       	breq	.+4      	; 0xc4 <EEPROM_writeByte+0x46>
        return ERROR; 
  c0:	1c 82       	std	Y+4, r1	; 0x04
  c2:	16 c0       	rjmp	.+44     	; 0xf0 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	0e 94 11 01 	call	0x222	; 0x222 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
  ca:	0e 94 4e 01 	call	0x29c	; 0x29c <TWI_getStatus>
  ce:	88 32       	cpi	r24, 0x28	; 40
  d0:	11 f0       	breq	.+4      	; 0xd6 <EEPROM_writeByte+0x58>
        return ERROR;
  d2:	1c 82       	std	Y+4, r1	; 0x04
  d4:	0d c0       	rjmp	.+26     	; 0xf0 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
  d6:	8b 81       	ldd	r24, Y+3	; 0x03
  d8:	0e 94 11 01 	call	0x222	; 0x222 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
  dc:	0e 94 4e 01 	call	0x29c	; 0x29c <TWI_getStatus>
  e0:	88 32       	cpi	r24, 0x28	; 40
  e2:	11 f0       	breq	.+4      	; 0xe8 <EEPROM_writeByte+0x6a>
        return ERROR;
  e4:	1c 82       	std	Y+4, r1	; 0x04
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
  e8:	0e 94 06 01 	call	0x20c	; 0x20c <TWI_stop>
	
    return SUCCESS;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	8c 83       	std	Y+4, r24	; 0x04
  f0:	8c 81       	ldd	r24, Y+4	; 0x04
}
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	cf 91       	pop	r28
  fc:	df 91       	pop	r29
  fe:	08 95       	ret

00000100 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
 100:	df 93       	push	r29
 102:	cf 93       	push	r28
 104:	00 d0       	rcall	.+0      	; 0x106 <EEPROM_readByte+0x6>
 106:	00 d0       	rcall	.+0      	; 0x108 <EEPROM_readByte+0x8>
 108:	0f 92       	push	r0
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	9a 83       	std	Y+2, r25	; 0x02
 110:	89 83       	std	Y+1, r24	; 0x01
 112:	7c 83       	std	Y+4, r23	; 0x04
 114:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
 116:	0e 94 f6 00 	call	0x1ec	; 0x1ec <TWI_start>
    if (TWI_getStatus() != TW_START)
 11a:	0e 94 4e 01 	call	0x29c	; 0x29c <TWI_getStatus>
 11e:	88 30       	cpi	r24, 0x08	; 8
 120:	11 f0       	breq	.+4      	; 0x126 <EEPROM_readByte+0x26>
        return ERROR;
 122:	1d 82       	std	Y+5, r1	; 0x05
 124:	44 c0       	rjmp	.+136    	; 0x1ae <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	9a 81       	ldd	r25, Y+2	; 0x02
 12a:	80 70       	andi	r24, 0x00	; 0
 12c:	97 70       	andi	r25, 0x07	; 7
 12e:	88 0f       	add	r24, r24
 130:	89 2f       	mov	r24, r25
 132:	88 1f       	adc	r24, r24
 134:	99 0b       	sbc	r25, r25
 136:	91 95       	neg	r25
 138:	80 6a       	ori	r24, 0xA0	; 160
 13a:	0e 94 11 01 	call	0x222	; 0x222 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
 13e:	0e 94 4e 01 	call	0x29c	; 0x29c <TWI_getStatus>
 142:	88 31       	cpi	r24, 0x18	; 24
 144:	11 f0       	breq	.+4      	; 0x14a <EEPROM_readByte+0x4a>
        return ERROR;
 146:	1d 82       	std	Y+5, r1	; 0x05
 148:	32 c0       	rjmp	.+100    	; 0x1ae <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	0e 94 11 01 	call	0x222	; 0x222 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
 150:	0e 94 4e 01 	call	0x29c	; 0x29c <TWI_getStatus>
 154:	88 32       	cpi	r24, 0x28	; 40
 156:	11 f0       	breq	.+4      	; 0x15c <EEPROM_readByte+0x5c>
        return ERROR;
 158:	1d 82       	std	Y+5, r1	; 0x05
 15a:	29 c0       	rjmp	.+82     	; 0x1ae <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
 15c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
 160:	0e 94 4e 01 	call	0x29c	; 0x29c <TWI_getStatus>
 164:	80 31       	cpi	r24, 0x10	; 16
 166:	11 f0       	breq	.+4      	; 0x16c <EEPROM_readByte+0x6c>
        return ERROR;
 168:	1d 82       	std	Y+5, r1	; 0x05
 16a:	21 c0       	rjmp	.+66     	; 0x1ae <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	9a 81       	ldd	r25, Y+2	; 0x02
 170:	80 70       	andi	r24, 0x00	; 0
 172:	97 70       	andi	r25, 0x07	; 7
 174:	88 0f       	add	r24, r24
 176:	89 2f       	mov	r24, r25
 178:	88 1f       	adc	r24, r24
 17a:	99 0b       	sbc	r25, r25
 17c:	91 95       	neg	r25
 17e:	81 6a       	ori	r24, 0xA1	; 161
 180:	0e 94 11 01 	call	0x222	; 0x222 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
 184:	0e 94 4e 01 	call	0x29c	; 0x29c <TWI_getStatus>
 188:	80 34       	cpi	r24, 0x40	; 64
 18a:	11 f0       	breq	.+4      	; 0x190 <EEPROM_readByte+0x90>
        return ERROR;
 18c:	1d 82       	std	Y+5, r1	; 0x05
 18e:	0f c0       	rjmp	.+30     	; 0x1ae <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
 190:	0e 94 3b 01 	call	0x276	; 0x276 <TWI_readWithNACK>
 194:	eb 81       	ldd	r30, Y+3	; 0x03
 196:	fc 81       	ldd	r31, Y+4	; 0x04
 198:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
 19a:	0e 94 4e 01 	call	0x29c	; 0x29c <TWI_getStatus>
 19e:	88 35       	cpi	r24, 0x58	; 88
 1a0:	11 f0       	breq	.+4      	; 0x1a6 <EEPROM_readByte+0xa6>
        return ERROR;
 1a2:	1d 82       	std	Y+5, r1	; 0x05
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
 1a6:	0e 94 06 01 	call	0x20c	; 0x20c <TWI_stop>
    return SUCCESS;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	8d 83       	std	Y+5, r24	; 0x05
 1ae:	8d 81       	ldd	r24, Y+5	; 0x05
}
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	cf 91       	pop	r28
 1bc:	df 91       	pop	r29
 1be:	08 95       	ret

000001c0 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
 1c0:	df 93       	push	r29
 1c2:	cf 93       	push	r28
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
 1c8:	e0 e2       	ldi	r30, 0x20	; 32
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	80 83       	st	Z, r24
	TWSR = 0x00;
 1d0:	e1 e2       	ldi	r30, 0x21	; 33
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
 1d6:	e2 e2       	ldi	r30, 0x22	; 34
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
 1de:	e6 e5       	ldi	r30, 0x56	; 86
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	80 83       	st	Z, r24
}
 1e6:	cf 91       	pop	r28
 1e8:	df 91       	pop	r29
 1ea:	08 95       	ret

000001ec <TWI_start>:

void TWI_start(void)
{
 1ec:	df 93       	push	r29
 1ee:	cf 93       	push	r28
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 1f4:	e6 e5       	ldi	r30, 0x56	; 86
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	84 ea       	ldi	r24, 0xA4	; 164
 1fa:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 1fc:	e6 e5       	ldi	r30, 0x56	; 86
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	88 23       	and	r24, r24
 204:	dc f7       	brge	.-10     	; 0x1fc <TWI_start+0x10>
}
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <TWI_stop>:

void TWI_stop(void)
{
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 214:	e6 e5       	ldi	r30, 0x56	; 86
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	84 e9       	ldi	r24, 0x94	; 148
 21a:	80 83       	st	Z, r24
}
 21c:	cf 91       	pop	r28
 21e:	df 91       	pop	r29
 220:	08 95       	ret

00000222 <TWI_write>:

void TWI_write(uint8 data)
{
 222:	df 93       	push	r29
 224:	cf 93       	push	r28
 226:	0f 92       	push	r0
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
 22e:	e3 e2       	ldi	r30, 0x23	; 35
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
 236:	e6 e5       	ldi	r30, 0x56	; 86
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	84 e8       	ldi	r24, 0x84	; 132
 23c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 23e:	e6 e5       	ldi	r30, 0x56	; 86
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	88 23       	and	r24, r24
 246:	dc f7       	brge	.-10     	; 0x23e <TWI_write+0x1c>
}
 248:	0f 90       	pop	r0
 24a:	cf 91       	pop	r28
 24c:	df 91       	pop	r29
 24e:	08 95       	ret

00000250 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
 250:	df 93       	push	r29
 252:	cf 93       	push	r28
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
 258:	e6 e5       	ldi	r30, 0x56	; 86
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	84 ec       	ldi	r24, 0xC4	; 196
 25e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 260:	e6 e5       	ldi	r30, 0x56	; 86
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	88 23       	and	r24, r24
 268:	dc f7       	brge	.-10     	; 0x260 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
 26a:	e3 e2       	ldi	r30, 0x23	; 35
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
}
 270:	cf 91       	pop	r28
 272:	df 91       	pop	r29
 274:	08 95       	ret

00000276 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
 276:	df 93       	push	r29
 278:	cf 93       	push	r28
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
 27e:	e6 e5       	ldi	r30, 0x56	; 86
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	84 e8       	ldi	r24, 0x84	; 132
 284:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
 286:	e6 e5       	ldi	r30, 0x56	; 86
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	88 23       	and	r24, r24
 28e:	dc f7       	brge	.-10     	; 0x286 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
 290:	e3 e2       	ldi	r30, 0x23	; 35
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
}
 296:	cf 91       	pop	r28
 298:	df 91       	pop	r29
 29a:	08 95       	ret

0000029c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
 29c:	df 93       	push	r29
 29e:	cf 93       	push	r28
 2a0:	0f 92       	push	r0
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
 2a6:	e1 e2       	ldi	r30, 0x21	; 33
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	88 7f       	andi	r24, 0xF8	; 248
 2ae:	89 83       	std	Y+1, r24	; 0x01
    return status;
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
}
 2b2:	0f 90       	pop	r0
 2b4:	cf 91       	pop	r28
 2b6:	df 91       	pop	r29
 2b8:	08 95       	ret

000002ba <Motor_Init>:
 * Function to Initialize Motor High and Low Bits
 * Parameters: low,bit, high_bit
 * Return : None
 *
 * */
void Motor_Init(uint8 low_bit, uint8 high_Bit){
 2ba:	df 93       	push	r29
 2bc:	cf 93       	push	r28
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <Motor_Init+0x6>
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT(Motor_PORT_DDR,low_bit); // set PB1 as output pin for Motor to go to IN1 pin
 2c8:	a7 e3       	ldi	r26, 0x37	; 55
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	e7 e3       	ldi	r30, 0x37	; 55
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	48 2f       	mov	r20, r24
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	28 2f       	mov	r18, r24
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <Motor_Init+0x2a>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	2a 95       	dec	r18
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <Motor_Init+0x26>
 2e8:	84 2b       	or	r24, r20
 2ea:	8c 93       	st	X, r24
	SET_BIT(Motor_PORT_DDR,high_Bit); // set PB2 as output pin for Motor
 2ec:	a7 e3       	ldi	r26, 0x37	; 55
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	e7 e3       	ldi	r30, 0x37	; 55
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	48 2f       	mov	r20, r24
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 2e       	mov	r0, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <Motor_Init+0x50>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <Motor_Init+0x4c>
 30e:	84 2b       	or	r24, r20
 310:	8c 93       	st	X, r24
}
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	cf 91       	pop	r28
 318:	df 91       	pop	r29
 31a:	08 95       	ret

0000031c <Motor_PWM_Timer0_Init>:
 * for the motor to work in order to control the speed
 * of the motor
 * parameters : duty_cycle
 * return: none
 * */
void Motor_PWM_Timer0_Init(unsigned char set_duty_cycle){
 31c:	df 93       	push	r29
 31e:	cf 93       	push	r28
 320:	0f 92       	push	r0
 322:	cd b7       	in	r28, 0x3d	; 61
 324:	de b7       	in	r29, 0x3e	; 62
 326:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //initial timer value
 328:	e2 e5       	ldi	r30, 0x52	; 82
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle;
 32e:	ec e5       	ldi	r30, 0x5C	; 92
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	80 83       	st	Z, r24

	Motor_PORT_DDR  = Motor_PORT_DDR | (1<<PB3); //set OC0 as output pin --> pin where the PWM signal is generated from MC.
 336:	a7 e3       	ldi	r26, 0x37	; 55
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	e7 e3       	ldi	r30, 0x37	; 55
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	88 60       	ori	r24, 0x08	; 8
 342:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
 344:	e3 e5       	ldi	r30, 0x53	; 83
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	8a e6       	ldi	r24, 0x6A	; 106
 34a:	80 83       	st	Z, r24
}
 34c:	0f 90       	pop	r0
 34e:	cf 91       	pop	r28
 350:	df 91       	pop	r29
 352:	08 95       	ret

00000354 <Motor_Stop>:
 * this function is to stop the motor
 * parameters : low bit , high bit
 * return : none
 *
 * */
void Motor_Stop(uint8 low_bit, uint8 high_Bit){
 354:	df 93       	push	r29
 356:	cf 93       	push	r28
 358:	00 d0       	rcall	.+0      	; 0x35a <Motor_Stop+0x6>
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	89 83       	std	Y+1, r24	; 0x01
 360:	6a 83       	std	Y+2, r22	; 0x02
	CLEAR_BIT(Motor_PORT,low_bit);
 362:	a8 e3       	ldi	r26, 0x38	; 56
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	e8 e3       	ldi	r30, 0x38	; 56
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	48 2f       	mov	r20, r24
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <Motor_Stop+0x2a>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	2a 95       	dec	r18
 380:	e2 f7       	brpl	.-8      	; 0x37a <Motor_Stop+0x26>
 382:	80 95       	com	r24
 384:	84 23       	and	r24, r20
 386:	8c 93       	st	X, r24
	CLEAR_BIT(Motor_PORT,high_Bit);
 388:	a8 e3       	ldi	r26, 0x38	; 56
 38a:	b0 e0       	ldi	r27, 0x00	; 0
 38c:	e8 e3       	ldi	r30, 0x38	; 56
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	80 81       	ld	r24, Z
 392:	48 2f       	mov	r20, r24
 394:	8a 81       	ldd	r24, Y+2	; 0x02
 396:	28 2f       	mov	r18, r24
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 2e       	mov	r0, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <Motor_Stop+0x52>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <Motor_Stop+0x4e>
 3aa:	80 95       	com	r24
 3ac:	84 23       	and	r24, r20
 3ae:	8c 93       	st	X, r24
}
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	cf 91       	pop	r28
 3b6:	df 91       	pop	r29
 3b8:	08 95       	ret

000003ba <Motor_Rotate_Right>:
 * (to the right)
 * parameters : low_bit , higg_bit
 * return : none
 *
 * */
void Motor_Rotate_Right(uint8 low_bit, uint8 high_Bit){
 3ba:	df 93       	push	r29
 3bc:	cf 93       	push	r28
 3be:	00 d0       	rcall	.+0      	; 0x3c0 <Motor_Rotate_Right+0x6>
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	89 83       	std	Y+1, r24	; 0x01
 3c6:	6a 83       	std	Y+2, r22	; 0x02
	CLEAR_BIT(Motor_PORT,low_bit);
 3c8:	a8 e3       	ldi	r26, 0x38	; 56
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	e8 e3       	ldi	r30, 0x38	; 56
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	48 2f       	mov	r20, r24
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	28 2f       	mov	r18, r24
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <Motor_Rotate_Right+0x2a>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	2a 95       	dec	r18
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <Motor_Rotate_Right+0x26>
 3e8:	80 95       	com	r24
 3ea:	84 23       	and	r24, r20
 3ec:	8c 93       	st	X, r24
	SET_BIT(Motor_PORT,high_Bit);
 3ee:	a8 e3       	ldi	r26, 0x38	; 56
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e8 e3       	ldi	r30, 0x38	; 56
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <Motor_Rotate_Right+0x52>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <Motor_Rotate_Right+0x4e>
 410:	84 2b       	or	r24, r20
 412:	8c 93       	st	X, r24
}
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	cf 91       	pop	r28
 41a:	df 91       	pop	r29
 41c:	08 95       	ret

0000041e <Motor_Rotate_Left>:
 * (to the left)
 * parameters : low_bit , higg_bit
 * return : none
 *
 * */
void Motor_Rotate_Left(uint8 low_bit, uint8 high_Bit){
 41e:	df 93       	push	r29
 420:	cf 93       	push	r28
 422:	00 d0       	rcall	.+0      	; 0x424 <Motor_Rotate_Left+0x6>
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
 428:	89 83       	std	Y+1, r24	; 0x01
 42a:	6a 83       	std	Y+2, r22	; 0x02
	SET_BIT(Motor_PORT,low_bit);
 42c:	a8 e3       	ldi	r26, 0x38	; 56
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	e8 e3       	ldi	r30, 0x38	; 56
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <Motor_Rotate_Left+0x2a>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	2a 95       	dec	r18
 44a:	e2 f7       	brpl	.-8      	; 0x444 <Motor_Rotate_Left+0x26>
 44c:	84 2b       	or	r24, r20
 44e:	8c 93       	st	X, r24
	CLEAR_BIT(Motor_PORT,high_Bit);
 450:	a8 e3       	ldi	r26, 0x38	; 56
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	e8 e3       	ldi	r30, 0x38	; 56
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	48 2f       	mov	r20, r24
 45c:	8a 81       	ldd	r24, Y+2	; 0x02
 45e:	28 2f       	mov	r18, r24
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	02 2e       	mov	r0, r18
 468:	02 c0       	rjmp	.+4      	; 0x46e <__stack+0xf>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	0a 94       	dec	r0
 470:	e2 f7       	brpl	.-8      	; 0x46a <__stack+0xb>
 472:	80 95       	com	r24
 474:	84 23       	and	r24, r20
 476:	8c 93       	st	X, r24
}
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	cf 91       	pop	r28
 47e:	df 91       	pop	r29
 480:	08 95       	ret

00000482 <main>:

#include "uart.h"
#include "motor.h"

int main(void)
{
 482:	df 93       	push	r29
 484:	cf 93       	push	r28
 486:	0f 92       	push	r0
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
	uint8 key;
	UART_init();
 48c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <UART_init>
	SREG |= (1<<7);/* Enable Global Interrupts */
 490:	af e5       	ldi	r26, 0x5F	; 95
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	ef e5       	ldi	r30, 0x5F	; 95
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	80 68       	ori	r24, 0x80	; 128
 49c:	8c 93       	st	X, r24
	Motor_Init(PB0,PB1); /* initize motor , to be more clear it is the interrupt init code (low_bit , high_bit) */
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	0e 94 5d 01 	call	0x2ba	; 0x2ba <Motor_Init>


	while(1)
    {
		key = UART_recieveByte(); //receive the pressed key from uart
 4a6:	0e 94 94 02 	call	0x528	; 0x528 <UART_recieveByte>
 4aa:	89 83       	std	Y+1, r24	; 0x01
		if( (key >= 0) && (key <= 9) )
 4ac:	89 81       	ldd	r24, Y+1	; 0x01
 4ae:	8a 30       	cpi	r24, 0x0A	; 10
 4b0:	28 f4       	brcc	.+10     	; 0x4bc <main+0x3a>
		{
			Motor_Stop(PB0,PB1); // stop motor funcition (low_bit,high_bit)
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	61 e0       	ldi	r22, 0x01	; 1
 4b6:	0e 94 aa 01 	call	0x354	; 0x354 <Motor_Stop>
 4ba:	f5 cf       	rjmp	.-22     	; 0x4a6 <main+0x24>
//			LCD_intgerToString(key); //display the pressed keypad switch
		}
		else
		{
			Motor_Rotate_Right(PB0,PB1); // rotate motor clock wise (low_bit,high_bit)
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Motor_Rotate_Right>
 4c4:	f0 cf       	rjmp	.-32     	; 0x4a6 <main+0x24>

000004c6 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
 4c6:	df 93       	push	r29
 4c8:	cf 93       	push	r28
 4ca:	cd b7       	in	r28, 0x3d	; 61
 4cc:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
 4ce:	eb e2       	ldi	r30, 0x2B	; 43
 4d0:	f0 e0       	ldi	r31, 0x00	; 0
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
 4d6:	ea e2       	ldi	r30, 0x2A	; 42
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	88 e1       	ldi	r24, 0x18	; 24
 4dc:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
 4de:	e0 e4       	ldi	r30, 0x40	; 64
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	86 e8       	ldi	r24, 0x86	; 134
 4e4:	80 83       	st	Z, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
 4e6:	e0 e4       	ldi	r30, 0x40	; 64
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
 4ec:	e9 e2       	ldi	r30, 0x29	; 41
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	8c e0       	ldi	r24, 0x0C	; 12
 4f2:	80 83       	st	Z, r24
}
 4f4:	cf 91       	pop	r28
 4f6:	df 91       	pop	r29
 4f8:	08 95       	ret

000004fa <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
 4fa:	df 93       	push	r29
 4fc:	cf 93       	push	r28
 4fe:	0f 92       	push	r0
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 506:	eb e2       	ldi	r30, 0x2B	; 43
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	88 2f       	mov	r24, r24
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	80 72       	andi	r24, 0x20	; 32
 512:	90 70       	andi	r25, 0x00	; 0
 514:	00 97       	sbiw	r24, 0x00	; 0
 516:	b9 f3       	breq	.-18     	; 0x506 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
 518:	ec e2       	ldi	r30, 0x2C	; 44
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
 520:	0f 90       	pop	r0
 522:	cf 91       	pop	r28
 524:	df 91       	pop	r29
 526:	08 95       	ret

00000528 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
 528:	df 93       	push	r29
 52a:	cf 93       	push	r28
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
 530:	eb e2       	ldi	r30, 0x2B	; 43
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	88 23       	and	r24, r24
 538:	dc f7       	brge	.-10     	; 0x530 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
 53a:	ec e2       	ldi	r30, 0x2C	; 44
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
}
 540:	cf 91       	pop	r28
 542:	df 91       	pop	r29
 544:	08 95       	ret

00000546 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
 546:	df 93       	push	r29
 548:	cf 93       	push	r28
 54a:	00 d0       	rcall	.+0      	; 0x54c <UART_sendString+0x6>
 54c:	0f 92       	push	r0
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
 552:	9b 83       	std	Y+3, r25	; 0x03
 554:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 556:	19 82       	std	Y+1, r1	; 0x01
 558:	0e c0       	rjmp	.+28     	; 0x576 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
 55a:	89 81       	ldd	r24, Y+1	; 0x01
 55c:	28 2f       	mov	r18, r24
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	8a 81       	ldd	r24, Y+2	; 0x02
 562:	9b 81       	ldd	r25, Y+3	; 0x03
 564:	fc 01       	movw	r30, r24
 566:	e2 0f       	add	r30, r18
 568:	f3 1f       	adc	r31, r19
 56a:	80 81       	ld	r24, Z
 56c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <UART_sendByte>
		i++;
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	8f 5f       	subi	r24, 0xFF	; 255
 574:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	28 2f       	mov	r18, r24
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	8a 81       	ldd	r24, Y+2	; 0x02
 57e:	9b 81       	ldd	r25, Y+3	; 0x03
 580:	fc 01       	movw	r30, r24
 582:	e2 0f       	add	r30, r18
 584:	f3 1f       	adc	r31, r19
 586:	80 81       	ld	r24, Z
 588:	88 23       	and	r24, r24
 58a:	39 f7       	brne	.-50     	; 0x55a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	0f 90       	pop	r0
 592:	cf 91       	pop	r28
 594:	df 91       	pop	r29
 596:	08 95       	ret

00000598 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
 598:	0f 93       	push	r16
 59a:	1f 93       	push	r17
 59c:	df 93       	push	r29
 59e:	cf 93       	push	r28
 5a0:	00 d0       	rcall	.+0      	; 0x5a2 <UART_receiveString+0xa>
 5a2:	0f 92       	push	r0
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	9b 83       	std	Y+3, r25	; 0x03
 5aa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 5ac:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
 5ae:	89 81       	ldd	r24, Y+1	; 0x01
 5b0:	28 2f       	mov	r18, r24
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	8a 81       	ldd	r24, Y+2	; 0x02
 5b6:	9b 81       	ldd	r25, Y+3	; 0x03
 5b8:	8c 01       	movw	r16, r24
 5ba:	02 0f       	add	r16, r18
 5bc:	13 1f       	adc	r17, r19
 5be:	0e 94 94 02 	call	0x528	; 0x528 <UART_recieveByte>
 5c2:	f8 01       	movw	r30, r16
 5c4:	80 83       	st	Z, r24
 5c6:	0f c0       	rjmp	.+30     	; 0x5e6 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
 5c8:	89 81       	ldd	r24, Y+1	; 0x01
 5ca:	8f 5f       	subi	r24, 0xFF	; 255
 5cc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	28 2f       	mov	r18, r24
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	8a 81       	ldd	r24, Y+2	; 0x02
 5d6:	9b 81       	ldd	r25, Y+3	; 0x03
 5d8:	8c 01       	movw	r16, r24
 5da:	02 0f       	add	r16, r18
 5dc:	13 1f       	adc	r17, r19
 5de:	0e 94 94 02 	call	0x528	; 0x528 <UART_recieveByte>
 5e2:	f8 01       	movw	r30, r16
 5e4:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	28 2f       	mov	r18, r24
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	8a 81       	ldd	r24, Y+2	; 0x02
 5ee:	9b 81       	ldd	r25, Y+3	; 0x03
 5f0:	fc 01       	movw	r30, r24
 5f2:	e2 0f       	add	r30, r18
 5f4:	f3 1f       	adc	r31, r19
 5f6:	80 81       	ld	r24, Z
 5f8:	83 32       	cpi	r24, 0x23	; 35
 5fa:	31 f7       	brne	.-52     	; 0x5c8 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	28 2f       	mov	r18, r24
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	8a 81       	ldd	r24, Y+2	; 0x02
 604:	9b 81       	ldd	r25, Y+3	; 0x03
 606:	fc 01       	movw	r30, r24
 608:	e2 0f       	add	r30, r18
 60a:	f3 1f       	adc	r31, r19
 60c:	10 82       	st	Z, r1
}
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	0f 90       	pop	r0
 614:	cf 91       	pop	r28
 616:	df 91       	pop	r29
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	08 95       	ret

0000061e <_exit>:
 61e:	f8 94       	cli

00000620 <__stop_program>:
 620:	ff cf       	rjmp	.-2      	; 0x620 <__stop_program>
