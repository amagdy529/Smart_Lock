
Smart_Lock_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000246a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000246a  000024fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800080  00800080  0000251e  2**0
                  ALLOC
  3 .stab         00001db8  00000000  00000000  00002520  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b4c  00000000  00000000  000042d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000050d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000089b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009573  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <main>
      8a:	0c 94 33 12 	jmp	0x2466	; 0x2466 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e7       	ldi	r26, 0x77	; 119
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 11 	jmp	0x23be	; 0x23be <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 11 	jmp	0x23be	; 0x23be <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 11 	jmp	0x236e	; 0x236e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	87 e7       	ldi	r24, 0x77	; 119
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 11 	jmp	0x23a6	; 0x23a6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 df 11 	jmp	0x23be	; 0x23be <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 df 11 	jmp	0x23be	; 0x23be <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c3 11 	jmp	0x2386	; 0x2386 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 df 11 	jmp	0x23be	; 0x23be <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c7 11 	jmp	0x238e	; 0x238e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e3 11 	jmp	0x23c6	; 0x23c6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_14>:

volatile uint16 g_adcResult = 0;

/*** ISR DEfinitions ***/
ISR(ADC_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	8f 93       	push	r24
     b52:	9f 93       	push	r25
     b54:	ef 93       	push	r30
     b56:	ff 93       	push	r31
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
	/* Read ADC Data after conversion complete */
	g_adcResult = ADC;
     b60:	e4 e2       	ldi	r30, 0x24	; 36
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	91 81       	ldd	r25, Z+1	; 0x01
     b68:	90 93 81 00 	sts	0x0081, r25
     b6c:	80 93 80 00 	sts	0x0080, r24
}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	ff 91       	pop	r31
     b76:	ef 91       	pop	r30
     b78:	9f 91       	pop	r25
     b7a:	8f 91       	pop	r24
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0
     b82:	1f 90       	pop	r1
     b84:	18 95       	reti

00000b86 <ADC_init>:


/*** Functions Definitions ****/

void ADC_init(void)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
     b8e:	e7 e2       	ldi	r30, 0x27	; 39
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 1 Enable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADPS1) | (1<<ADPS0);
     b94:	e6 e2       	ldi	r30, 0x26	; 38
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	8b e8       	ldi	r24, 0x8B	; 139
     b9a:	80 83       	st	Z, r24
}
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <ADC_readChannel>:

void ADC_readChannel(uint8 channel_num)
{
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	0f 92       	push	r0
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	87 70       	andi	r24, 0x07	; 7
     bb2:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     bb4:	a7 e2       	ldi	r26, 0x27	; 39
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	e7 e2       	ldi	r30, 0x27	; 39
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	80 7e       	andi	r24, 0xE0	; 224
     bc0:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
     bc2:	a7 e2       	ldi	r26, 0x27	; 39
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	e7 e2       	ldi	r30, 0x27	; 39
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	90 81       	ld	r25, Z
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	89 2b       	or	r24, r25
     bd0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
     bd2:	a6 e2       	ldi	r26, 0x26	; 38
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e6 e2       	ldi	r30, 0x26	; 38
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	80 64       	ori	r24, 0x40	; 64
     bde:	8c 93       	st	X, r24
}
     be0:	0f 90       	pop	r0
     be2:	cf 91       	pop	r28
     be4:	df 91       	pop	r29
     be6:	08 95       	ret

00000be8 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
     be8:	df 93       	push	r29
     bea:	cf 93       	push	r28
     bec:	00 d0       	rcall	.+0      	; 0xbee <KeyPad_getPressedKey+0x6>
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     bf2:	1a 82       	std	Y+2, r1	; 0x02
     bf4:	4c c0       	rjmp	.+152    	; 0xc8e <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
     bf6:	ea e3       	ldi	r30, 0x3A	; 58
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	80 e1       	ldi	r24, 0x10	; 16
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <KeyPad_getPressedKey+0x22>
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	2a 95       	dec	r18
     c0c:	e2 f7       	brpl	.-8      	; 0xc06 <KeyPad_getPressedKey+0x1e>
     c0e:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
     c10:	eb e3       	ldi	r30, 0x3B	; 59
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	28 2f       	mov	r18, r24
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	80 e1       	ldi	r24, 0x10	; 16
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	02 2e       	mov	r0, r18
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <KeyPad_getPressedKey+0x3e>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	0a 94       	dec	r0
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <KeyPad_getPressedKey+0x3a>
     c2a:	80 95       	com	r24
     c2c:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
     c2e:	19 82       	std	Y+1, r1	; 0x01
     c30:	28 c0       	rjmp	.+80     	; 0xc82 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
     c32:	e9 e3       	ldi	r30, 0x39	; 57
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	88 2f       	mov	r24, r24
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	a9 01       	movw	r20, r18
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <KeyPad_getPressedKey+0x62>
     c46:	55 95       	asr	r21
     c48:	47 95       	ror	r20
     c4a:	8a 95       	dec	r24
     c4c:	e2 f7       	brpl	.-8      	; 0xc46 <KeyPad_getPressedKey+0x5e>
     c4e:	ca 01       	movw	r24, r20
     c50:	81 70       	andi	r24, 0x01	; 1
     c52:	90 70       	andi	r25, 0x00	; 0
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	91 f4       	brne	.+36     	; 0xc7c <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	98 2f       	mov	r25, r24
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	89 0f       	add	r24, r25
     c6c:	8f 5f       	subi	r24, 0xFF	; 255
     c6e:	0e 94 4c 06 	call	0xc98	; 0xc98 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
     c7c:	89 81       	ldd	r24, Y+1	; 0x01
     c7e:	8f 5f       	subi	r24, 0xFF	; 255
     c80:	89 83       	std	Y+1, r24	; 0x01
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	84 30       	cpi	r24, 0x04	; 4
     c86:	a8 f2       	brcs	.-86     	; 0xc32 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
     c88:	8a 81       	ldd	r24, Y+2	; 0x02
     c8a:	8f 5f       	subi	r24, 0xFF	; 255
     c8c:	8a 83       	std	Y+2, r24	; 0x02
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	84 30       	cpi	r24, 0x04	; 4
     c92:	08 f4       	brcc	.+2      	; 0xc96 <KeyPad_getPressedKey+0xae>
     c94:	b0 cf       	rjmp	.-160    	; 0xbf6 <KeyPad_getPressedKey+0xe>
     c96:	ad cf       	rjmp	.-166    	; 0xbf2 <KeyPad_getPressedKey+0xa>

00000c98 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <KeyPad_4x4_adjustKeyNumber+0x6>
     c9e:	00 d0       	rcall	.+0      	; 0xca0 <KeyPad_4x4_adjustKeyNumber+0x8>
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	3c 83       	std	Y+4, r19	; 0x04
     cae:	2b 83       	std	Y+3, r18	; 0x03
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	88 30       	cpi	r24, 0x08	; 8
     cb6:	91 05       	cpc	r25, r1
     cb8:	09 f4       	brne	.+2      	; 0xcbc <KeyPad_4x4_adjustKeyNumber+0x24>
     cba:	70 c0       	rjmp	.+224    	; 0xd9c <KeyPad_4x4_adjustKeyNumber+0x104>
     cbc:	2b 81       	ldd	r18, Y+3	; 0x03
     cbe:	3c 81       	ldd	r19, Y+4	; 0x04
     cc0:	29 30       	cpi	r18, 0x09	; 9
     cc2:	31 05       	cpc	r19, r1
     cc4:	5c f5       	brge	.+86     	; 0xd1c <KeyPad_4x4_adjustKeyNumber+0x84>
     cc6:	8b 81       	ldd	r24, Y+3	; 0x03
     cc8:	9c 81       	ldd	r25, Y+4	; 0x04
     cca:	84 30       	cpi	r24, 0x04	; 4
     ccc:	91 05       	cpc	r25, r1
     cce:	09 f4       	brne	.+2      	; 0xcd2 <KeyPad_4x4_adjustKeyNumber+0x3a>
     cd0:	59 c0       	rjmp	.+178    	; 0xd84 <KeyPad_4x4_adjustKeyNumber+0xec>
     cd2:	2b 81       	ldd	r18, Y+3	; 0x03
     cd4:	3c 81       	ldd	r19, Y+4	; 0x04
     cd6:	25 30       	cpi	r18, 0x05	; 5
     cd8:	31 05       	cpc	r19, r1
     cda:	9c f4       	brge	.+38     	; 0xd02 <KeyPad_4x4_adjustKeyNumber+0x6a>
     cdc:	8b 81       	ldd	r24, Y+3	; 0x03
     cde:	9c 81       	ldd	r25, Y+4	; 0x04
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	91 05       	cpc	r25, r1
     ce4:	09 f4       	brne	.+2      	; 0xce8 <KeyPad_4x4_adjustKeyNumber+0x50>
     ce6:	48 c0       	rjmp	.+144    	; 0xd78 <KeyPad_4x4_adjustKeyNumber+0xe0>
     ce8:	2b 81       	ldd	r18, Y+3	; 0x03
     cea:	3c 81       	ldd	r19, Y+4	; 0x04
     cec:	23 30       	cpi	r18, 0x03	; 3
     cee:	31 05       	cpc	r19, r1
     cf0:	0c f0       	brlt	.+2      	; 0xcf4 <KeyPad_4x4_adjustKeyNumber+0x5c>
     cf2:	45 c0       	rjmp	.+138    	; 0xd7e <KeyPad_4x4_adjustKeyNumber+0xe6>
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	91 05       	cpc	r25, r1
     cfc:	09 f4       	brne	.+2      	; 0xd00 <KeyPad_4x4_adjustKeyNumber+0x68>
     cfe:	39 c0       	rjmp	.+114    	; 0xd72 <KeyPad_4x4_adjustKeyNumber+0xda>
     d00:	67 c0       	rjmp	.+206    	; 0xdd0 <KeyPad_4x4_adjustKeyNumber+0x138>
     d02:	2b 81       	ldd	r18, Y+3	; 0x03
     d04:	3c 81       	ldd	r19, Y+4	; 0x04
     d06:	26 30       	cpi	r18, 0x06	; 6
     d08:	31 05       	cpc	r19, r1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <KeyPad_4x4_adjustKeyNumber+0x76>
     d0c:	41 c0       	rjmp	.+130    	; 0xd90 <KeyPad_4x4_adjustKeyNumber+0xf8>
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	9c 81       	ldd	r25, Y+4	; 0x04
     d12:	87 30       	cpi	r24, 0x07	; 7
     d14:	91 05       	cpc	r25, r1
     d16:	0c f0       	brlt	.+2      	; 0xd1a <KeyPad_4x4_adjustKeyNumber+0x82>
     d18:	3e c0       	rjmp	.+124    	; 0xd96 <KeyPad_4x4_adjustKeyNumber+0xfe>
     d1a:	37 c0       	rjmp	.+110    	; 0xd8a <KeyPad_4x4_adjustKeyNumber+0xf2>
     d1c:	2b 81       	ldd	r18, Y+3	; 0x03
     d1e:	3c 81       	ldd	r19, Y+4	; 0x04
     d20:	2c 30       	cpi	r18, 0x0C	; 12
     d22:	31 05       	cpc	r19, r1
     d24:	09 f4       	brne	.+2      	; 0xd28 <KeyPad_4x4_adjustKeyNumber+0x90>
     d26:	46 c0       	rjmp	.+140    	; 0xdb4 <KeyPad_4x4_adjustKeyNumber+0x11c>
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	8d 30       	cpi	r24, 0x0D	; 13
     d2e:	91 05       	cpc	r25, r1
     d30:	5c f4       	brge	.+22     	; 0xd48 <KeyPad_4x4_adjustKeyNumber+0xb0>
     d32:	2b 81       	ldd	r18, Y+3	; 0x03
     d34:	3c 81       	ldd	r19, Y+4	; 0x04
     d36:	2a 30       	cpi	r18, 0x0A	; 10
     d38:	31 05       	cpc	r19, r1
     d3a:	b1 f1       	breq	.+108    	; 0xda8 <KeyPad_4x4_adjustKeyNumber+0x110>
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	9c 81       	ldd	r25, Y+4	; 0x04
     d40:	8b 30       	cpi	r24, 0x0B	; 11
     d42:	91 05       	cpc	r25, r1
     d44:	a4 f5       	brge	.+104    	; 0xdae <KeyPad_4x4_adjustKeyNumber+0x116>
     d46:	2d c0       	rjmp	.+90     	; 0xda2 <KeyPad_4x4_adjustKeyNumber+0x10a>
     d48:	2b 81       	ldd	r18, Y+3	; 0x03
     d4a:	3c 81       	ldd	r19, Y+4	; 0x04
     d4c:	2e 30       	cpi	r18, 0x0E	; 14
     d4e:	31 05       	cpc	r19, r1
     d50:	b9 f1       	breq	.+110    	; 0xdc0 <KeyPad_4x4_adjustKeyNumber+0x128>
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	9c 81       	ldd	r25, Y+4	; 0x04
     d56:	8e 30       	cpi	r24, 0x0E	; 14
     d58:	91 05       	cpc	r25, r1
     d5a:	7c f1       	brlt	.+94     	; 0xdba <KeyPad_4x4_adjustKeyNumber+0x122>
     d5c:	2b 81       	ldd	r18, Y+3	; 0x03
     d5e:	3c 81       	ldd	r19, Y+4	; 0x04
     d60:	2f 30       	cpi	r18, 0x0F	; 15
     d62:	31 05       	cpc	r19, r1
     d64:	79 f1       	breq	.+94     	; 0xdc4 <KeyPad_4x4_adjustKeyNumber+0x12c>
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	80 31       	cpi	r24, 0x10	; 16
     d6c:	91 05       	cpc	r25, r1
     d6e:	69 f1       	breq	.+90     	; 0xdca <KeyPad_4x4_adjustKeyNumber+0x132>
     d70:	2f c0       	rjmp	.+94     	; 0xdd0 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
     d72:	97 e0       	ldi	r25, 0x07	; 7
     d74:	9a 83       	std	Y+2, r25	; 0x02
     d76:	2e c0       	rjmp	.+92     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
     d78:	28 e0       	ldi	r18, 0x08	; 8
     d7a:	2a 83       	std	Y+2, r18	; 0x02
     d7c:	2b c0       	rjmp	.+86     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
     d7e:	39 e0       	ldi	r19, 0x09	; 9
     d80:	3a 83       	std	Y+2, r19	; 0x02
     d82:	28 c0       	rjmp	.+80     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '%'; // ASCII Code of %
     d84:	85 e2       	ldi	r24, 0x25	; 37
     d86:	8a 83       	std	Y+2, r24	; 0x02
     d88:	25 c0       	rjmp	.+74     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
     d8a:	94 e0       	ldi	r25, 0x04	; 4
     d8c:	9a 83       	std	Y+2, r25	; 0x02
     d8e:	22 c0       	rjmp	.+68     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
     d90:	25 e0       	ldi	r18, 0x05	; 5
     d92:	2a 83       	std	Y+2, r18	; 0x02
     d94:	1f c0       	rjmp	.+62     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
     d96:	36 e0       	ldi	r19, 0x06	; 6
     d98:	3a 83       	std	Y+2, r19	; 0x02
     d9a:	1c c0       	rjmp	.+56     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
     d9c:	8a e2       	ldi	r24, 0x2A	; 42
     d9e:	8a 83       	std	Y+2, r24	; 0x02
     da0:	19 c0       	rjmp	.+50     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	9a 83       	std	Y+2, r25	; 0x02
     da6:	16 c0       	rjmp	.+44     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
     da8:	22 e0       	ldi	r18, 0x02	; 2
     daa:	2a 83       	std	Y+2, r18	; 0x02
     dac:	13 c0       	rjmp	.+38     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
     dae:	33 e0       	ldi	r19, 0x03	; 3
     db0:	3a 83       	std	Y+2, r19	; 0x02
     db2:	10 c0       	rjmp	.+32     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
     db4:	8d e2       	ldi	r24, 0x2D	; 45
     db6:	8a 83       	std	Y+2, r24	; 0x02
     db8:	0d c0       	rjmp	.+26     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
     dba:	9d e0       	ldi	r25, 0x0D	; 13
     dbc:	9a 83       	std	Y+2, r25	; 0x02
     dbe:	0a c0       	rjmp	.+20     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
     dc0:	1a 82       	std	Y+2, r1	; 0x02
     dc2:	08 c0       	rjmp	.+16     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
     dc4:	2d e3       	ldi	r18, 0x3D	; 61
     dc6:	2a 83       	std	Y+2, r18	; 0x02
     dc8:	05 c0       	rjmp	.+10     	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
     dca:	3b e2       	ldi	r19, 0x2B	; 43
     dcc:	3a 83       	std	Y+2, r19	; 0x02
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	8a 83       	std	Y+2, r24	; 0x02
     dd4:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     dec:	a7 e3       	ldi	r26, 0x37	; 55
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e7 e3       	ldi	r30, 0x37	; 55
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	8e 60       	ori	r24, 0x0E	; 14
     df8:	8c 93       	st	X, r24

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
     dfa:	a4 e3       	ldi	r26, 0x34	; 52
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e4 e3       	ldi	r30, 0x34	; 52
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	8f 60       	ori	r24, 0x0F	; 15
     e06:	8c 93       	st	X, r24
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	0e 94 13 07 	call	0xe26	; 0xe26 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     e0e:	88 e2       	ldi	r24, 0x28	; 40
     e10:	0e 94 13 07 	call	0xe26	; 0xe26 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     e14:	8c e0       	ldi	r24, 0x0C	; 12
     e16:	0e 94 13 07 	call	0xe26	; 0xe26 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	0e 94 13 07 	call	0xe26	; 0xe26 <LCD_sendCommand>
}
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	08 95       	ret

00000e26 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	c3 56       	subi	r28, 0x63	; 99
     e34:	d0 40       	sbci	r29, 0x00	; 0
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	fe 01       	movw	r30, r28
     e42:	ed 59       	subi	r30, 0x9D	; 157
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     e48:	a8 e3       	ldi	r26, 0x38	; 56
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e8 e3       	ldi	r30, 0x38	; 56
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	8d 7f       	andi	r24, 0xFD	; 253
     e54:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     e56:	a8 e3       	ldi	r26, 0x38	; 56
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e8 e3       	ldi	r30, 0x38	; 56
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	8b 7f       	andi	r24, 0xFB	; 251
     e62:	8c 93       	st	X, r24
     e64:	fe 01       	movw	r30, r28
     e66:	e1 5a       	subi	r30, 0xA1	; 161
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e8       	ldi	r26, 0x80	; 128
     e70:	bf e3       	ldi	r27, 0x3F	; 63
     e72:	80 83       	st	Z, r24
     e74:	91 83       	std	Z+1, r25	; 0x01
     e76:	a2 83       	std	Z+2, r26	; 0x02
     e78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7a:	8e 01       	movw	r16, r28
     e7c:	05 5a       	subi	r16, 0xA5	; 165
     e7e:	1f 4f       	sbci	r17, 0xFF	; 255
     e80:	fe 01       	movw	r30, r28
     e82:	e1 5a       	subi	r30, 0xA1	; 161
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	60 81       	ld	r22, Z
     e88:	71 81       	ldd	r23, Z+1	; 0x01
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	4a e7       	ldi	r20, 0x7A	; 122
     e94:	53 e4       	ldi	r21, 0x43	; 67
     e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	f8 01       	movw	r30, r16
     ea0:	80 83       	st	Z, r24
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	a2 83       	std	Z+2, r26	; 0x02
     ea6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ea8:	fe 01       	movw	r30, r28
     eaa:	e5 5a       	subi	r30, 0xA5	; 165
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	60 81       	ld	r22, Z
     eb0:	71 81       	ldd	r23, Z+1	; 0x01
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e8       	ldi	r20, 0x80	; 128
     ebc:	5f e3       	ldi	r21, 0x3F	; 63
     ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec2:	88 23       	and	r24, r24
     ec4:	44 f4       	brge	.+16     	; 0xed6 <LCD_sendCommand+0xb0>
		__ticks = 1;
     ec6:	fe 01       	movw	r30, r28
     ec8:	e7 5a       	subi	r30, 0xA7	; 167
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	91 83       	std	Z+1, r25	; 0x01
     ed2:	80 83       	st	Z, r24
     ed4:	64 c0       	rjmp	.+200    	; 0xf9e <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     ed6:	fe 01       	movw	r30, r28
     ed8:	e5 5a       	subi	r30, 0xA5	; 165
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	60 81       	ld	r22, Z
     ede:	71 81       	ldd	r23, Z+1	; 0x01
     ee0:	82 81       	ldd	r24, Z+2	; 0x02
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	3f ef       	ldi	r19, 0xFF	; 255
     ee8:	4f e7       	ldi	r20, 0x7F	; 127
     eea:	57 e4       	ldi	r21, 0x47	; 71
     eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef0:	18 16       	cp	r1, r24
     ef2:	0c f0       	brlt	.+2      	; 0xef6 <LCD_sendCommand+0xd0>
     ef4:	43 c0       	rjmp	.+134    	; 0xf7c <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	fe 01       	movw	r30, r28
     ef8:	e1 5a       	subi	r30, 0xA1	; 161
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	60 81       	ld	r22, Z
     efe:	71 81       	ldd	r23, Z+1	; 0x01
     f00:	82 81       	ldd	r24, Z+2	; 0x02
     f02:	93 81       	ldd	r25, Z+3	; 0x03
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e2       	ldi	r20, 0x20	; 32
     f0a:	51 e4       	ldi	r21, 0x41	; 65
     f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f10:	dc 01       	movw	r26, r24
     f12:	cb 01       	movw	r24, r22
     f14:	8e 01       	movw	r16, r28
     f16:	07 5a       	subi	r16, 0xA7	; 167
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	bc 01       	movw	r22, r24
     f1c:	cd 01       	movw	r24, r26
     f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	f8 01       	movw	r30, r16
     f28:	91 83       	std	Z+1, r25	; 0x01
     f2a:	80 83       	st	Z, r24
     f2c:	1f c0       	rjmp	.+62     	; 0xf6c <LCD_sendCommand+0x146>
     f2e:	fe 01       	movw	r30, r28
     f30:	e9 5a       	subi	r30, 0xA9	; 169
     f32:	ff 4f       	sbci	r31, 0xFF	; 255
     f34:	89 e1       	ldi	r24, 0x19	; 25
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	91 83       	std	Z+1, r25	; 0x01
     f3a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f3c:	fe 01       	movw	r30, r28
     f3e:	e9 5a       	subi	r30, 0xA9	; 169
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <LCD_sendCommand+0x120>
     f4a:	fe 01       	movw	r30, r28
     f4c:	e9 5a       	subi	r30, 0xA9	; 169
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
     f50:	91 83       	std	Z+1, r25	; 0x01
     f52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f54:	de 01       	movw	r26, r28
     f56:	a7 5a       	subi	r26, 0xA7	; 167
     f58:	bf 4f       	sbci	r27, 0xFF	; 255
     f5a:	fe 01       	movw	r30, r28
     f5c:	e7 5a       	subi	r30, 0xA7	; 167
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	11 96       	adiw	r26, 0x01	; 1
     f68:	9c 93       	st	X, r25
     f6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6c:	fe 01       	movw	r30, r28
     f6e:	e7 5a       	subi	r30, 0xA7	; 167
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	80 81       	ld	r24, Z
     f74:	91 81       	ldd	r25, Z+1	; 0x01
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	d1 f6       	brne	.-76     	; 0xf2e <LCD_sendCommand+0x108>
     f7a:	27 c0       	rjmp	.+78     	; 0xfca <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7c:	8e 01       	movw	r16, r28
     f7e:	07 5a       	subi	r16, 0xA7	; 167
     f80:	1f 4f       	sbci	r17, 0xFF	; 255
     f82:	fe 01       	movw	r30, r28
     f84:	e5 5a       	subi	r30, 0xA5	; 165
     f86:	ff 4f       	sbci	r31, 0xFF	; 255
     f88:	60 81       	ld	r22, Z
     f8a:	71 81       	ldd	r23, Z+1	; 0x01
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	f8 01       	movw	r30, r16
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	80 83       	st	Z, r24
     f9e:	de 01       	movw	r26, r28
     fa0:	ab 5a       	subi	r26, 0xAB	; 171
     fa2:	bf 4f       	sbci	r27, 0xFF	; 255
     fa4:	fe 01       	movw	r30, r28
     fa6:	e7 5a       	subi	r30, 0xA7	; 167
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 81       	ld	r24, Z
     fac:	91 81       	ldd	r25, Z+1	; 0x01
     fae:	8d 93       	st	X+, r24
     fb0:	9c 93       	st	X, r25
     fb2:	fe 01       	movw	r30, r28
     fb4:	eb 5a       	subi	r30, 0xAB	; 171
     fb6:	ff 4f       	sbci	r31, 0xFF	; 255
     fb8:	80 81       	ld	r24, Z
     fba:	91 81       	ldd	r25, Z+1	; 0x01
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <LCD_sendCommand+0x196>
     fc0:	fe 01       	movw	r30, r28
     fc2:	eb 5a       	subi	r30, 0xAB	; 171
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	91 83       	std	Z+1, r25	; 0x01
     fc8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
     fca:	a8 e3       	ldi	r26, 0x38	; 56
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e8 e3       	ldi	r30, 0x38	; 56
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	88 60       	ori	r24, 0x08	; 8
     fd6:	8c 93       	st	X, r24
     fd8:	fe 01       	movw	r30, r28
     fda:	ef 5a       	subi	r30, 0xAF	; 175
     fdc:	ff 4f       	sbci	r31, 0xFF	; 255
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a0 e8       	ldi	r26, 0x80	; 128
     fe4:	bf e3       	ldi	r27, 0x3F	; 63
     fe6:	80 83       	st	Z, r24
     fe8:	91 83       	std	Z+1, r25	; 0x01
     fea:	a2 83       	std	Z+2, r26	; 0x02
     fec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fee:	8e 01       	movw	r16, r28
     ff0:	03 5b       	subi	r16, 0xB3	; 179
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
     ff4:	fe 01       	movw	r30, r28
     ff6:	ef 5a       	subi	r30, 0xAF	; 175
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	60 81       	ld	r22, Z
     ffc:	71 81       	ldd	r23, Z+1	; 0x01
     ffe:	82 81       	ldd	r24, Z+2	; 0x02
    1000:	93 81       	ldd	r25, Z+3	; 0x03
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	4a e7       	ldi	r20, 0x7A	; 122
    1008:	53 e4       	ldi	r21, 0x43	; 67
    100a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100e:	dc 01       	movw	r26, r24
    1010:	cb 01       	movw	r24, r22
    1012:	f8 01       	movw	r30, r16
    1014:	80 83       	st	Z, r24
    1016:	91 83       	std	Z+1, r25	; 0x01
    1018:	a2 83       	std	Z+2, r26	; 0x02
    101a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    101c:	fe 01       	movw	r30, r28
    101e:	e3 5b       	subi	r30, 0xB3	; 179
    1020:	ff 4f       	sbci	r31, 0xFF	; 255
    1022:	60 81       	ld	r22, Z
    1024:	71 81       	ldd	r23, Z+1	; 0x01
    1026:	82 81       	ldd	r24, Z+2	; 0x02
    1028:	93 81       	ldd	r25, Z+3	; 0x03
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	40 e8       	ldi	r20, 0x80	; 128
    1030:	5f e3       	ldi	r21, 0x3F	; 63
    1032:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1036:	88 23       	and	r24, r24
    1038:	44 f4       	brge	.+16     	; 0x104a <LCD_sendCommand+0x224>
		__ticks = 1;
    103a:	fe 01       	movw	r30, r28
    103c:	e5 5b       	subi	r30, 0xB5	; 181
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
    1048:	64 c0       	rjmp	.+200    	; 0x1112 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    104a:	fe 01       	movw	r30, r28
    104c:	e3 5b       	subi	r30, 0xB3	; 179
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	60 81       	ld	r22, Z
    1052:	71 81       	ldd	r23, Z+1	; 0x01
    1054:	82 81       	ldd	r24, Z+2	; 0x02
    1056:	93 81       	ldd	r25, Z+3	; 0x03
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	3f ef       	ldi	r19, 0xFF	; 255
    105c:	4f e7       	ldi	r20, 0x7F	; 127
    105e:	57 e4       	ldi	r21, 0x47	; 71
    1060:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1064:	18 16       	cp	r1, r24
    1066:	0c f0       	brlt	.+2      	; 0x106a <LCD_sendCommand+0x244>
    1068:	43 c0       	rjmp	.+134    	; 0x10f0 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106a:	fe 01       	movw	r30, r28
    106c:	ef 5a       	subi	r30, 0xAF	; 175
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	60 81       	ld	r22, Z
    1072:	71 81       	ldd	r23, Z+1	; 0x01
    1074:	82 81       	ldd	r24, Z+2	; 0x02
    1076:	93 81       	ldd	r25, Z+3	; 0x03
    1078:	20 e0       	ldi	r18, 0x00	; 0
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e2       	ldi	r20, 0x20	; 32
    107e:	51 e4       	ldi	r21, 0x41	; 65
    1080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	8e 01       	movw	r16, r28
    108a:	05 5b       	subi	r16, 0xB5	; 181
    108c:	1f 4f       	sbci	r17, 0xFF	; 255
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	f8 01       	movw	r30, r16
    109c:	91 83       	std	Z+1, r25	; 0x01
    109e:	80 83       	st	Z, r24
    10a0:	1f c0       	rjmp	.+62     	; 0x10e0 <LCD_sendCommand+0x2ba>
    10a2:	fe 01       	movw	r30, r28
    10a4:	e7 5b       	subi	r30, 0xB7	; 183
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	89 e1       	ldi	r24, 0x19	; 25
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	91 83       	std	Z+1, r25	; 0x01
    10ae:	80 83       	st	Z, r24
    10b0:	fe 01       	movw	r30, r28
    10b2:	e7 5b       	subi	r30, 0xB7	; 183
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
    10ba:	01 97       	sbiw	r24, 0x01	; 1
    10bc:	f1 f7       	brne	.-4      	; 0x10ba <LCD_sendCommand+0x294>
    10be:	fe 01       	movw	r30, r28
    10c0:	e7 5b       	subi	r30, 0xB7	; 183
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	91 83       	std	Z+1, r25	; 0x01
    10c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c8:	de 01       	movw	r26, r28
    10ca:	a5 5b       	subi	r26, 0xB5	; 181
    10cc:	bf 4f       	sbci	r27, 0xFF	; 255
    10ce:	fe 01       	movw	r30, r28
    10d0:	e5 5b       	subi	r30, 0xB5	; 181
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	11 96       	adiw	r26, 0x01	; 1
    10dc:	9c 93       	st	X, r25
    10de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e0:	fe 01       	movw	r30, r28
    10e2:	e5 5b       	subi	r30, 0xB5	; 181
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	80 81       	ld	r24, Z
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	d1 f6       	brne	.-76     	; 0x10a2 <LCD_sendCommand+0x27c>
    10ee:	27 c0       	rjmp	.+78     	; 0x113e <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f0:	8e 01       	movw	r16, r28
    10f2:	05 5b       	subi	r16, 0xB5	; 181
    10f4:	1f 4f       	sbci	r17, 0xFF	; 255
    10f6:	fe 01       	movw	r30, r28
    10f8:	e3 5b       	subi	r30, 0xB3	; 179
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	60 81       	ld	r22, Z
    10fe:	71 81       	ldd	r23, Z+1	; 0x01
    1100:	82 81       	ldd	r24, Z+2	; 0x02
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	f8 01       	movw	r30, r16
    110e:	91 83       	std	Z+1, r25	; 0x01
    1110:	80 83       	st	Z, r24
    1112:	de 01       	movw	r26, r28
    1114:	a9 5b       	subi	r26, 0xB9	; 185
    1116:	bf 4f       	sbci	r27, 0xFF	; 255
    1118:	fe 01       	movw	r30, r28
    111a:	e5 5b       	subi	r30, 0xB5	; 181
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	80 81       	ld	r24, Z
    1120:	91 81       	ldd	r25, Z+1	; 0x01
    1122:	8d 93       	st	X+, r24
    1124:	9c 93       	st	X, r25
    1126:	fe 01       	movw	r30, r28
    1128:	e9 5b       	subi	r30, 0xB9	; 185
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <LCD_sendCommand+0x30a>
    1134:	fe 01       	movw	r30, r28
    1136:	e9 5b       	subi	r30, 0xB9	; 185
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	91 83       	std	Z+1, r25	; 0x01
    113c:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
    113e:	a5 e3       	ldi	r26, 0x35	; 53
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e5 e3       	ldi	r30, 0x35	; 53
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	98 2f       	mov	r25, r24
    114a:	90 7f       	andi	r25, 0xF0	; 240
    114c:	fe 01       	movw	r30, r28
    114e:	ed 59       	subi	r30, 0x9D	; 157
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	80 81       	ld	r24, Z
    1154:	82 95       	swap	r24
    1156:	8f 70       	andi	r24, 0x0F	; 15
    1158:	89 2b       	or	r24, r25
    115a:	8c 93       	st	X, r24
    115c:	fe 01       	movw	r30, r28
    115e:	ed 5b       	subi	r30, 0xBD	; 189
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a0 e8       	ldi	r26, 0x80	; 128
    1168:	bf e3       	ldi	r27, 0x3F	; 63
    116a:	80 83       	st	Z, r24
    116c:	91 83       	std	Z+1, r25	; 0x01
    116e:	a2 83       	std	Z+2, r26	; 0x02
    1170:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	8e 01       	movw	r16, r28
    1174:	01 5c       	subi	r16, 0xC1	; 193
    1176:	1f 4f       	sbci	r17, 0xFF	; 255
    1178:	fe 01       	movw	r30, r28
    117a:	ed 5b       	subi	r30, 0xBD	; 189
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	60 81       	ld	r22, Z
    1180:	71 81       	ldd	r23, Z+1	; 0x01
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	4a e7       	ldi	r20, 0x7A	; 122
    118c:	53 e4       	ldi	r21, 0x43	; 67
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	f8 01       	movw	r30, r16
    1198:	80 83       	st	Z, r24
    119a:	91 83       	std	Z+1, r25	; 0x01
    119c:	a2 83       	std	Z+2, r26	; 0x02
    119e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11a0:	fe 01       	movw	r30, r28
    11a2:	ff 96       	adiw	r30, 0x3f	; 63
    11a4:	60 81       	ld	r22, Z
    11a6:	71 81       	ldd	r23, Z+1	; 0x01
    11a8:	82 81       	ldd	r24, Z+2	; 0x02
    11aa:	93 81       	ldd	r25, Z+3	; 0x03
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e8       	ldi	r20, 0x80	; 128
    11b2:	5f e3       	ldi	r21, 0x3F	; 63
    11b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b8:	88 23       	and	r24, r24
    11ba:	2c f4       	brge	.+10     	; 0x11c6 <LCD_sendCommand+0x3a0>
		__ticks = 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9e af       	std	Y+62, r25	; 0x3e
    11c2:	8d af       	std	Y+61, r24	; 0x3d
    11c4:	46 c0       	rjmp	.+140    	; 0x1252 <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
    11c6:	fe 01       	movw	r30, r28
    11c8:	ff 96       	adiw	r30, 0x3f	; 63
    11ca:	60 81       	ld	r22, Z
    11cc:	71 81       	ldd	r23, Z+1	; 0x01
    11ce:	82 81       	ldd	r24, Z+2	; 0x02
    11d0:	93 81       	ldd	r25, Z+3	; 0x03
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	3f ef       	ldi	r19, 0xFF	; 255
    11d6:	4f e7       	ldi	r20, 0x7F	; 127
    11d8:	57 e4       	ldi	r21, 0x47	; 71
    11da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11de:	18 16       	cp	r1, r24
    11e0:	64 f5       	brge	.+88     	; 0x123a <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e2:	fe 01       	movw	r30, r28
    11e4:	ed 5b       	subi	r30, 0xBD	; 189
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 e2       	ldi	r20, 0x20	; 32
    11f6:	51 e4       	ldi	r21, 0x41	; 65
    11f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1208:	dc 01       	movw	r26, r24
    120a:	cb 01       	movw	r24, r22
    120c:	9e af       	std	Y+62, r25	; 0x3e
    120e:	8d af       	std	Y+61, r24	; 0x3d
    1210:	0f c0       	rjmp	.+30     	; 0x1230 <LCD_sendCommand+0x40a>
    1212:	89 e1       	ldi	r24, 0x19	; 25
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9c af       	std	Y+60, r25	; 0x3c
    1218:	8b af       	std	Y+59, r24	; 0x3b
    121a:	8b ad       	ldd	r24, Y+59	; 0x3b
    121c:	9c ad       	ldd	r25, Y+60	; 0x3c
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <LCD_sendCommand+0x3f8>
    1222:	9c af       	std	Y+60, r25	; 0x3c
    1224:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1226:	8d ad       	ldd	r24, Y+61	; 0x3d
    1228:	9e ad       	ldd	r25, Y+62	; 0x3e
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	9e af       	std	Y+62, r25	; 0x3e
    122e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1230:	8d ad       	ldd	r24, Y+61	; 0x3d
    1232:	9e ad       	ldd	r25, Y+62	; 0x3e
    1234:	00 97       	sbiw	r24, 0x00	; 0
    1236:	69 f7       	brne	.-38     	; 0x1212 <LCD_sendCommand+0x3ec>
    1238:	16 c0       	rjmp	.+44     	; 0x1266 <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    123a:	fe 01       	movw	r30, r28
    123c:	ff 96       	adiw	r30, 0x3f	; 63
    123e:	60 81       	ld	r22, Z
    1240:	71 81       	ldd	r23, Z+1	; 0x01
    1242:	82 81       	ldd	r24, Z+2	; 0x02
    1244:	93 81       	ldd	r25, Z+3	; 0x03
    1246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	9e af       	std	Y+62, r25	; 0x3e
    1250:	8d af       	std	Y+61, r24	; 0x3d
    1252:	8d ad       	ldd	r24, Y+61	; 0x3d
    1254:	9e ad       	ldd	r25, Y+62	; 0x3e
    1256:	9a af       	std	Y+58, r25	; 0x3a
    1258:	89 af       	std	Y+57, r24	; 0x39
    125a:	89 ad       	ldd	r24, Y+57	; 0x39
    125c:	9a ad       	ldd	r25, Y+58	; 0x3a
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <LCD_sendCommand+0x438>
    1262:	9a af       	std	Y+58, r25	; 0x3a
    1264:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1266:	a8 e3       	ldi	r26, 0x38	; 56
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e8 e3       	ldi	r30, 0x38	; 56
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	87 7f       	andi	r24, 0xF7	; 247
    1272:	8c 93       	st	X, r24
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a0 e8       	ldi	r26, 0x80	; 128
    127a:	bf e3       	ldi	r27, 0x3F	; 63
    127c:	8d ab       	std	Y+53, r24	; 0x35
    127e:	9e ab       	std	Y+54, r25	; 0x36
    1280:	af ab       	std	Y+55, r26	; 0x37
    1282:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1284:	6d a9       	ldd	r22, Y+53	; 0x35
    1286:	7e a9       	ldd	r23, Y+54	; 0x36
    1288:	8f a9       	ldd	r24, Y+55	; 0x37
    128a:	98 ad       	ldd	r25, Y+56	; 0x38
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a e7       	ldi	r20, 0x7A	; 122
    1292:	53 e4       	ldi	r21, 0x43	; 67
    1294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	89 ab       	std	Y+49, r24	; 0x31
    129e:	9a ab       	std	Y+50, r25	; 0x32
    12a0:	ab ab       	std	Y+51, r26	; 0x33
    12a2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    12a4:	69 a9       	ldd	r22, Y+49	; 0x31
    12a6:	7a a9       	ldd	r23, Y+50	; 0x32
    12a8:	8b a9       	ldd	r24, Y+51	; 0x33
    12aa:	9c a9       	ldd	r25, Y+52	; 0x34
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b8:	88 23       	and	r24, r24
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <LCD_sendCommand+0x4a0>
		__ticks = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	98 ab       	std	Y+48, r25	; 0x30
    12c2:	8f a7       	std	Y+47, r24	; 0x2f
    12c4:	3f c0       	rjmp	.+126    	; 0x1344 <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    12c6:	69 a9       	ldd	r22, Y+49	; 0x31
    12c8:	7a a9       	ldd	r23, Y+50	; 0x32
    12ca:	8b a9       	ldd	r24, Y+51	; 0x33
    12cc:	9c a9       	ldd	r25, Y+52	; 0x34
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	4f e7       	ldi	r20, 0x7F	; 127
    12d4:	57 e4       	ldi	r21, 0x47	; 71
    12d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	4c f5       	brge	.+82     	; 0x1330 <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	6d a9       	ldd	r22, Y+53	; 0x35
    12e0:	7e a9       	ldd	r23, Y+54	; 0x36
    12e2:	8f a9       	ldd	r24, Y+55	; 0x37
    12e4:	98 ad       	ldd	r25, Y+56	; 0x38
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	98 ab       	std	Y+48, r25	; 0x30
    1304:	8f a7       	std	Y+47, r24	; 0x2f
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <LCD_sendCommand+0x500>
    1308:	89 e1       	ldi	r24, 0x19	; 25
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9e a7       	std	Y+46, r25	; 0x2e
    130e:	8d a7       	std	Y+45, r24	; 0x2d
    1310:	8d a5       	ldd	r24, Y+45	; 0x2d
    1312:	9e a5       	ldd	r25, Y+46	; 0x2e
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <LCD_sendCommand+0x4ee>
    1318:	9e a7       	std	Y+46, r25	; 0x2e
    131a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131c:	8f a5       	ldd	r24, Y+47	; 0x2f
    131e:	98 a9       	ldd	r25, Y+48	; 0x30
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	98 ab       	std	Y+48, r25	; 0x30
    1324:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1326:	8f a5       	ldd	r24, Y+47	; 0x2f
    1328:	98 a9       	ldd	r25, Y+48	; 0x30
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f7       	brne	.-38     	; 0x1308 <LCD_sendCommand+0x4e2>
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1330:	69 a9       	ldd	r22, Y+49	; 0x31
    1332:	7a a9       	ldd	r23, Y+50	; 0x32
    1334:	8b a9       	ldd	r24, Y+51	; 0x33
    1336:	9c a9       	ldd	r25, Y+52	; 0x34
    1338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	98 ab       	std	Y+48, r25	; 0x30
    1342:	8f a7       	std	Y+47, r24	; 0x2f
    1344:	8f a5       	ldd	r24, Y+47	; 0x2f
    1346:	98 a9       	ldd	r25, Y+48	; 0x30
    1348:	9c a7       	std	Y+44, r25	; 0x2c
    134a:	8b a7       	std	Y+43, r24	; 0x2b
    134c:	8b a5       	ldd	r24, Y+43	; 0x2b
    134e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <LCD_sendCommand+0x52a>
    1354:	9c a7       	std	Y+44, r25	; 0x2c
    1356:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1358:	a8 e3       	ldi	r26, 0x38	; 56
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e8 e3       	ldi	r30, 0x38	; 56
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	88 60       	ori	r24, 0x08	; 8
    1364:	8c 93       	st	X, r24
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a0 e8       	ldi	r26, 0x80	; 128
    136c:	bf e3       	ldi	r27, 0x3F	; 63
    136e:	8f a3       	std	Y+39, r24	; 0x27
    1370:	98 a7       	std	Y+40, r25	; 0x28
    1372:	a9 a7       	std	Y+41, r26	; 0x29
    1374:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1376:	6f a1       	ldd	r22, Y+39	; 0x27
    1378:	78 a5       	ldd	r23, Y+40	; 0x28
    137a:	89 a5       	ldd	r24, Y+41	; 0x29
    137c:	9a a5       	ldd	r25, Y+42	; 0x2a
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	4a e7       	ldi	r20, 0x7A	; 122
    1384:	53 e4       	ldi	r21, 0x43	; 67
    1386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	8b a3       	std	Y+35, r24	; 0x23
    1390:	9c a3       	std	Y+36, r25	; 0x24
    1392:	ad a3       	std	Y+37, r26	; 0x25
    1394:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1396:	6b a1       	ldd	r22, Y+35	; 0x23
    1398:	7c a1       	ldd	r23, Y+36	; 0x24
    139a:	8d a1       	ldd	r24, Y+37	; 0x25
    139c:	9e a1       	ldd	r25, Y+38	; 0x26
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e8       	ldi	r20, 0x80	; 128
    13a4:	5f e3       	ldi	r21, 0x3F	; 63
    13a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13aa:	88 23       	and	r24, r24
    13ac:	2c f4       	brge	.+10     	; 0x13b8 <LCD_sendCommand+0x592>
		__ticks = 1;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	9a a3       	std	Y+34, r25	; 0x22
    13b4:	89 a3       	std	Y+33, r24	; 0x21
    13b6:	3f c0       	rjmp	.+126    	; 0x1436 <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    13b8:	6b a1       	ldd	r22, Y+35	; 0x23
    13ba:	7c a1       	ldd	r23, Y+36	; 0x24
    13bc:	8d a1       	ldd	r24, Y+37	; 0x25
    13be:	9e a1       	ldd	r25, Y+38	; 0x26
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	3f ef       	ldi	r19, 0xFF	; 255
    13c4:	4f e7       	ldi	r20, 0x7F	; 127
    13c6:	57 e4       	ldi	r21, 0x47	; 71
    13c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13cc:	18 16       	cp	r1, r24
    13ce:	4c f5       	brge	.+82     	; 0x1422 <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d0:	6f a1       	ldd	r22, Y+39	; 0x27
    13d2:	78 a5       	ldd	r23, Y+40	; 0x28
    13d4:	89 a5       	ldd	r24, Y+41	; 0x29
    13d6:	9a a5       	ldd	r25, Y+42	; 0x2a
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e2       	ldi	r20, 0x20	; 32
    13de:	51 e4       	ldi	r21, 0x41	; 65
    13e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e4:	dc 01       	movw	r26, r24
    13e6:	cb 01       	movw	r24, r22
    13e8:	bc 01       	movw	r22, r24
    13ea:	cd 01       	movw	r24, r26
    13ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	9a a3       	std	Y+34, r25	; 0x22
    13f6:	89 a3       	std	Y+33, r24	; 0x21
    13f8:	0f c0       	rjmp	.+30     	; 0x1418 <LCD_sendCommand+0x5f2>
    13fa:	89 e1       	ldi	r24, 0x19	; 25
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	98 a3       	std	Y+32, r25	; 0x20
    1400:	8f 8f       	std	Y+31, r24	; 0x1f
    1402:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1404:	98 a1       	ldd	r25, Y+32	; 0x20
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	f1 f7       	brne	.-4      	; 0x1406 <LCD_sendCommand+0x5e0>
    140a:	98 a3       	std	Y+32, r25	; 0x20
    140c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    140e:	89 a1       	ldd	r24, Y+33	; 0x21
    1410:	9a a1       	ldd	r25, Y+34	; 0x22
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	9a a3       	std	Y+34, r25	; 0x22
    1416:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1418:	89 a1       	ldd	r24, Y+33	; 0x21
    141a:	9a a1       	ldd	r25, Y+34	; 0x22
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	69 f7       	brne	.-38     	; 0x13fa <LCD_sendCommand+0x5d4>
    1420:	14 c0       	rjmp	.+40     	; 0x144a <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1422:	6b a1       	ldd	r22, Y+35	; 0x23
    1424:	7c a1       	ldd	r23, Y+36	; 0x24
    1426:	8d a1       	ldd	r24, Y+37	; 0x25
    1428:	9e a1       	ldd	r25, Y+38	; 0x26
    142a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	9a a3       	std	Y+34, r25	; 0x22
    1434:	89 a3       	std	Y+33, r24	; 0x21
    1436:	89 a1       	ldd	r24, Y+33	; 0x21
    1438:	9a a1       	ldd	r25, Y+34	; 0x22
    143a:	9e 8f       	std	Y+30, r25	; 0x1e
    143c:	8d 8f       	std	Y+29, r24	; 0x1d
    143e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1440:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	f1 f7       	brne	.-4      	; 0x1442 <LCD_sendCommand+0x61c>
    1446:	9e 8f       	std	Y+30, r25	; 0x1e
    1448:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    144a:	a5 e3       	ldi	r26, 0x35	; 53
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e5 e3       	ldi	r30, 0x35	; 53
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	98 2f       	mov	r25, r24
    1456:	90 7f       	andi	r25, 0xF0	; 240
    1458:	fe 01       	movw	r30, r28
    145a:	ed 59       	subi	r30, 0x9D	; 157
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	80 81       	ld	r24, Z
    1460:	8f 70       	andi	r24, 0x0F	; 15
    1462:	89 2b       	or	r24, r25
    1464:	8c 93       	st	X, r24
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a0 e8       	ldi	r26, 0x80	; 128
    146c:	bf e3       	ldi	r27, 0x3F	; 63
    146e:	89 8f       	std	Y+25, r24	; 0x19
    1470:	9a 8f       	std	Y+26, r25	; 0x1a
    1472:	ab 8f       	std	Y+27, r26	; 0x1b
    1474:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1476:	69 8d       	ldd	r22, Y+25	; 0x19
    1478:	7a 8d       	ldd	r23, Y+26	; 0x1a
    147a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    147c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	4a e7       	ldi	r20, 0x7A	; 122
    1484:	53 e4       	ldi	r21, 0x43	; 67
    1486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	8d 8b       	std	Y+21, r24	; 0x15
    1490:	9e 8b       	std	Y+22, r25	; 0x16
    1492:	af 8b       	std	Y+23, r26	; 0x17
    1494:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1496:	6d 89       	ldd	r22, Y+21	; 0x15
    1498:	7e 89       	ldd	r23, Y+22	; 0x16
    149a:	8f 89       	ldd	r24, Y+23	; 0x17
    149c:	98 8d       	ldd	r25, Y+24	; 0x18
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e8       	ldi	r20, 0x80	; 128
    14a4:	5f e3       	ldi	r21, 0x3F	; 63
    14a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14aa:	88 23       	and	r24, r24
    14ac:	2c f4       	brge	.+10     	; 0x14b8 <LCD_sendCommand+0x692>
		__ticks = 1;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	9c 8b       	std	Y+20, r25	; 0x14
    14b4:	8b 8b       	std	Y+19, r24	; 0x13
    14b6:	3f c0       	rjmp	.+126    	; 0x1536 <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    14b8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ba:	7e 89       	ldd	r23, Y+22	; 0x16
    14bc:	8f 89       	ldd	r24, Y+23	; 0x17
    14be:	98 8d       	ldd	r25, Y+24	; 0x18
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	3f ef       	ldi	r19, 0xFF	; 255
    14c4:	4f e7       	ldi	r20, 0x7F	; 127
    14c6:	57 e4       	ldi	r21, 0x47	; 71
    14c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14cc:	18 16       	cp	r1, r24
    14ce:	4c f5       	brge	.+82     	; 0x1522 <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d0:	69 8d       	ldd	r22, Y+25	; 0x19
    14d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e2       	ldi	r20, 0x20	; 32
    14de:	51 e4       	ldi	r21, 0x41	; 65
    14e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	bc 01       	movw	r22, r24
    14ea:	cd 01       	movw	r24, r26
    14ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	9c 8b       	std	Y+20, r25	; 0x14
    14f6:	8b 8b       	std	Y+19, r24	; 0x13
    14f8:	0f c0       	rjmp	.+30     	; 0x1518 <LCD_sendCommand+0x6f2>
    14fa:	89 e1       	ldi	r24, 0x19	; 25
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9a 8b       	std	Y+18, r25	; 0x12
    1500:	89 8b       	std	Y+17, r24	; 0x11
    1502:	89 89       	ldd	r24, Y+17	; 0x11
    1504:	9a 89       	ldd	r25, Y+18	; 0x12
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <LCD_sendCommand+0x6e0>
    150a:	9a 8b       	std	Y+18, r25	; 0x12
    150c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150e:	8b 89       	ldd	r24, Y+19	; 0x13
    1510:	9c 89       	ldd	r25, Y+20	; 0x14
    1512:	01 97       	sbiw	r24, 0x01	; 1
    1514:	9c 8b       	std	Y+20, r25	; 0x14
    1516:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1518:	8b 89       	ldd	r24, Y+19	; 0x13
    151a:	9c 89       	ldd	r25, Y+20	; 0x14
    151c:	00 97       	sbiw	r24, 0x00	; 0
    151e:	69 f7       	brne	.-38     	; 0x14fa <LCD_sendCommand+0x6d4>
    1520:	14 c0       	rjmp	.+40     	; 0x154a <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1522:	6d 89       	ldd	r22, Y+21	; 0x15
    1524:	7e 89       	ldd	r23, Y+22	; 0x16
    1526:	8f 89       	ldd	r24, Y+23	; 0x17
    1528:	98 8d       	ldd	r25, Y+24	; 0x18
    152a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	9c 8b       	std	Y+20, r25	; 0x14
    1534:	8b 8b       	std	Y+19, r24	; 0x13
    1536:	8b 89       	ldd	r24, Y+19	; 0x13
    1538:	9c 89       	ldd	r25, Y+20	; 0x14
    153a:	98 8b       	std	Y+16, r25	; 0x10
    153c:	8f 87       	std	Y+15, r24	; 0x0f
    153e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1540:	98 89       	ldd	r25, Y+16	; 0x10
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_sendCommand+0x71c>
    1546:	98 8b       	std	Y+16, r25	; 0x10
    1548:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    154a:	a8 e3       	ldi	r26, 0x38	; 56
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e8 e3       	ldi	r30, 0x38	; 56
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	87 7f       	andi	r24, 0xF7	; 247
    1556:	8c 93       	st	X, r24
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a0 e8       	ldi	r26, 0x80	; 128
    155e:	bf e3       	ldi	r27, 0x3F	; 63
    1560:	8b 87       	std	Y+11, r24	; 0x0b
    1562:	9c 87       	std	Y+12, r25	; 0x0c
    1564:	ad 87       	std	Y+13, r26	; 0x0d
    1566:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1568:	6b 85       	ldd	r22, Y+11	; 0x0b
    156a:	7c 85       	ldd	r23, Y+12	; 0x0c
    156c:	8d 85       	ldd	r24, Y+13	; 0x0d
    156e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	4a e7       	ldi	r20, 0x7A	; 122
    1576:	53 e4       	ldi	r21, 0x43	; 67
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	8f 83       	std	Y+7, r24	; 0x07
    1582:	98 87       	std	Y+8, r25	; 0x08
    1584:	a9 87       	std	Y+9, r26	; 0x09
    1586:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1588:	6f 81       	ldd	r22, Y+7	; 0x07
    158a:	78 85       	ldd	r23, Y+8	; 0x08
    158c:	89 85       	ldd	r24, Y+9	; 0x09
    158e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	40 e8       	ldi	r20, 0x80	; 128
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159c:	88 23       	and	r24, r24
    159e:	2c f4       	brge	.+10     	; 0x15aa <LCD_sendCommand+0x784>
		__ticks = 1;
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
    15a8:	3f c0       	rjmp	.+126    	; 0x1628 <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    15aa:	6f 81       	ldd	r22, Y+7	; 0x07
    15ac:	78 85       	ldd	r23, Y+8	; 0x08
    15ae:	89 85       	ldd	r24, Y+9	; 0x09
    15b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b2:	20 e0       	ldi	r18, 0x00	; 0
    15b4:	3f ef       	ldi	r19, 0xFF	; 255
    15b6:	4f e7       	ldi	r20, 0x7F	; 127
    15b8:	57 e4       	ldi	r21, 0x47	; 71
    15ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15be:	18 16       	cp	r1, r24
    15c0:	4c f5       	brge	.+82     	; 0x1614 <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e2       	ldi	r20, 0x20	; 32
    15d0:	51 e4       	ldi	r21, 0x41	; 65
    15d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	bc 01       	movw	r22, r24
    15dc:	cd 01       	movw	r24, r26
    15de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
    15ea:	0f c0       	rjmp	.+30     	; 0x160a <LCD_sendCommand+0x7e4>
    15ec:	89 e1       	ldi	r24, 0x19	; 25
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	9c 83       	std	Y+4, r25	; 0x04
    15f2:	8b 83       	std	Y+3, r24	; 0x03
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	9c 81       	ldd	r25, Y+4	; 0x04
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <LCD_sendCommand+0x7d2>
    15fc:	9c 83       	std	Y+4, r25	; 0x04
    15fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1600:	8d 81       	ldd	r24, Y+5	; 0x05
    1602:	9e 81       	ldd	r25, Y+6	; 0x06
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	9e 83       	std	Y+6, r25	; 0x06
    1608:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	69 f7       	brne	.-38     	; 0x15ec <LCD_sendCommand+0x7c6>
    1612:	14 c0       	rjmp	.+40     	; 0x163c <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1614:	6f 81       	ldd	r22, Y+7	; 0x07
    1616:	78 85       	ldd	r23, Y+8	; 0x08
    1618:	89 85       	ldd	r24, Y+9	; 0x09
    161a:	9a 85       	ldd	r25, Y+10	; 0x0a
    161c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9e 83       	std	Y+6, r25	; 0x06
    1626:	8d 83       	std	Y+5, r24	; 0x05
    1628:	8d 81       	ldd	r24, Y+5	; 0x05
    162a:	9e 81       	ldd	r25, Y+6	; 0x06
    162c:	9a 83       	std	Y+2, r25	; 0x02
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCD_sendCommand+0x80e>
    1638:	9a 83       	std	Y+2, r25	; 0x02
    163a:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    163c:	cd 59       	subi	r28, 0x9D	; 157
    163e:	df 4f       	sbci	r29, 0xFF	; 255
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	08 95       	ret

00001654 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	c3 56       	subi	r28, 0x63	; 99
    1662:	d0 40       	sbci	r29, 0x00	; 0
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	fe 01       	movw	r30, r28
    1670:	ed 59       	subi	r30, 0x9D	; 157
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1676:	a8 e3       	ldi	r26, 0x38	; 56
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e8 e3       	ldi	r30, 0x38	; 56
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	82 60       	ori	r24, 0x02	; 2
    1682:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1684:	a8 e3       	ldi	r26, 0x38	; 56
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e8 e3       	ldi	r30, 0x38	; 56
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8b 7f       	andi	r24, 0xFB	; 251
    1690:	8c 93       	st	X, r24
    1692:	fe 01       	movw	r30, r28
    1694:	e1 5a       	subi	r30, 0xA1	; 161
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a0 e8       	ldi	r26, 0x80	; 128
    169e:	bf e3       	ldi	r27, 0x3F	; 63
    16a0:	80 83       	st	Z, r24
    16a2:	91 83       	std	Z+1, r25	; 0x01
    16a4:	a2 83       	std	Z+2, r26	; 0x02
    16a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a8:	8e 01       	movw	r16, r28
    16aa:	05 5a       	subi	r16, 0xA5	; 165
    16ac:	1f 4f       	sbci	r17, 0xFF	; 255
    16ae:	fe 01       	movw	r30, r28
    16b0:	e1 5a       	subi	r30, 0xA1	; 161
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	60 81       	ld	r22, Z
    16b6:	71 81       	ldd	r23, Z+1	; 0x01
    16b8:	82 81       	ldd	r24, Z+2	; 0x02
    16ba:	93 81       	ldd	r25, Z+3	; 0x03
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	4a e7       	ldi	r20, 0x7A	; 122
    16c2:	53 e4       	ldi	r21, 0x43	; 67
    16c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	f8 01       	movw	r30, r16
    16ce:	80 83       	st	Z, r24
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	a2 83       	std	Z+2, r26	; 0x02
    16d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16d6:	fe 01       	movw	r30, r28
    16d8:	e5 5a       	subi	r30, 0xA5	; 165
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	60 81       	ld	r22, Z
    16de:	71 81       	ldd	r23, Z+1	; 0x01
    16e0:	82 81       	ldd	r24, Z+2	; 0x02
    16e2:	93 81       	ldd	r25, Z+3	; 0x03
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	5f e3       	ldi	r21, 0x3F	; 63
    16ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	44 f4       	brge	.+16     	; 0x1704 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    16f4:	fe 01       	movw	r30, r28
    16f6:	e7 5a       	subi	r30, 0xA7	; 167
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	91 83       	std	Z+1, r25	; 0x01
    1700:	80 83       	st	Z, r24
    1702:	64 c0       	rjmp	.+200    	; 0x17cc <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1704:	fe 01       	movw	r30, r28
    1706:	e5 5a       	subi	r30, 0xA5	; 165
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	3f ef       	ldi	r19, 0xFF	; 255
    1716:	4f e7       	ldi	r20, 0x7F	; 127
    1718:	57 e4       	ldi	r21, 0x47	; 71
    171a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    171e:	18 16       	cp	r1, r24
    1720:	0c f0       	brlt	.+2      	; 0x1724 <LCD_displayCharacter+0xd0>
    1722:	43 c0       	rjmp	.+134    	; 0x17aa <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1724:	fe 01       	movw	r30, r28
    1726:	e1 5a       	subi	r30, 0xA1	; 161
    1728:	ff 4f       	sbci	r31, 0xFF	; 255
    172a:	60 81       	ld	r22, Z
    172c:	71 81       	ldd	r23, Z+1	; 0x01
    172e:	82 81       	ldd	r24, Z+2	; 0x02
    1730:	93 81       	ldd	r25, Z+3	; 0x03
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	8e 01       	movw	r16, r28
    1744:	07 5a       	subi	r16, 0xA7	; 167
    1746:	1f 4f       	sbci	r17, 0xFF	; 255
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	f8 01       	movw	r30, r16
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
    175a:	1f c0       	rjmp	.+62     	; 0x179a <LCD_displayCharacter+0x146>
    175c:	fe 01       	movw	r30, r28
    175e:	e9 5a       	subi	r30, 0xA9	; 169
    1760:	ff 4f       	sbci	r31, 0xFF	; 255
    1762:	89 e1       	ldi	r24, 0x19	; 25
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	80 83       	st	Z, r24
    176a:	fe 01       	movw	r30, r28
    176c:	e9 5a       	subi	r30, 0xA9	; 169
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	91 81       	ldd	r25, Z+1	; 0x01
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <LCD_displayCharacter+0x120>
    1778:	fe 01       	movw	r30, r28
    177a:	e9 5a       	subi	r30, 0xA9	; 169
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	de 01       	movw	r26, r28
    1784:	a7 5a       	subi	r26, 0xA7	; 167
    1786:	bf 4f       	sbci	r27, 0xFF	; 255
    1788:	fe 01       	movw	r30, r28
    178a:	e7 5a       	subi	r30, 0xA7	; 167
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	11 96       	adiw	r26, 0x01	; 1
    1796:	9c 93       	st	X, r25
    1798:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179a:	fe 01       	movw	r30, r28
    179c:	e7 5a       	subi	r30, 0xA7	; 167
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	d1 f6       	brne	.-76     	; 0x175c <LCD_displayCharacter+0x108>
    17a8:	27 c0       	rjmp	.+78     	; 0x17f8 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17aa:	8e 01       	movw	r16, r28
    17ac:	07 5a       	subi	r16, 0xA7	; 167
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	fe 01       	movw	r30, r28
    17b2:	e5 5a       	subi	r30, 0xA5	; 165
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	60 81       	ld	r22, Z
    17b8:	71 81       	ldd	r23, Z+1	; 0x01
    17ba:	82 81       	ldd	r24, Z+2	; 0x02
    17bc:	93 81       	ldd	r25, Z+3	; 0x03
    17be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	f8 01       	movw	r30, r16
    17c8:	91 83       	std	Z+1, r25	; 0x01
    17ca:	80 83       	st	Z, r24
    17cc:	de 01       	movw	r26, r28
    17ce:	ab 5a       	subi	r26, 0xAB	; 171
    17d0:	bf 4f       	sbci	r27, 0xFF	; 255
    17d2:	fe 01       	movw	r30, r28
    17d4:	e7 5a       	subi	r30, 0xA7	; 167
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 81       	ld	r24, Z
    17da:	91 81       	ldd	r25, Z+1	; 0x01
    17dc:	8d 93       	st	X+, r24
    17de:	9c 93       	st	X, r25
    17e0:	fe 01       	movw	r30, r28
    17e2:	eb 5a       	subi	r30, 0xAB	; 171
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <LCD_displayCharacter+0x196>
    17ee:	fe 01       	movw	r30, r28
    17f0:	eb 5a       	subi	r30, 0xAB	; 171
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    17f8:	a8 e3       	ldi	r26, 0x38	; 56
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e8 e3       	ldi	r30, 0x38	; 56
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	88 60       	ori	r24, 0x08	; 8
    1804:	8c 93       	st	X, r24
    1806:	fe 01       	movw	r30, r28
    1808:	ef 5a       	subi	r30, 0xAF	; 175
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e8       	ldi	r26, 0x80	; 128
    1812:	bf e3       	ldi	r27, 0x3F	; 63
    1814:	80 83       	st	Z, r24
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	a2 83       	std	Z+2, r26	; 0x02
    181a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181c:	8e 01       	movw	r16, r28
    181e:	03 5b       	subi	r16, 0xB3	; 179
    1820:	1f 4f       	sbci	r17, 0xFF	; 255
    1822:	fe 01       	movw	r30, r28
    1824:	ef 5a       	subi	r30, 0xAF	; 175
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	60 81       	ld	r22, Z
    182a:	71 81       	ldd	r23, Z+1	; 0x01
    182c:	82 81       	ldd	r24, Z+2	; 0x02
    182e:	93 81       	ldd	r25, Z+3	; 0x03
    1830:	20 e0       	ldi	r18, 0x00	; 0
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	4a e7       	ldi	r20, 0x7A	; 122
    1836:	53 e4       	ldi	r21, 0x43	; 67
    1838:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	f8 01       	movw	r30, r16
    1842:	80 83       	st	Z, r24
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	a2 83       	std	Z+2, r26	; 0x02
    1848:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    184a:	fe 01       	movw	r30, r28
    184c:	e3 5b       	subi	r30, 0xB3	; 179
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	44 f4       	brge	.+16     	; 0x1878 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1868:	fe 01       	movw	r30, r28
    186a:	e5 5b       	subi	r30, 0xB5	; 181
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	91 83       	std	Z+1, r25	; 0x01
    1874:	80 83       	st	Z, r24
    1876:	64 c0       	rjmp	.+200    	; 0x1940 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1878:	fe 01       	movw	r30, r28
    187a:	e3 5b       	subi	r30, 0xB3	; 179
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	60 81       	ld	r22, Z
    1880:	71 81       	ldd	r23, Z+1	; 0x01
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	93 81       	ldd	r25, Z+3	; 0x03
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	3f ef       	ldi	r19, 0xFF	; 255
    188a:	4f e7       	ldi	r20, 0x7F	; 127
    188c:	57 e4       	ldi	r21, 0x47	; 71
    188e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1892:	18 16       	cp	r1, r24
    1894:	0c f0       	brlt	.+2      	; 0x1898 <LCD_displayCharacter+0x244>
    1896:	43 c0       	rjmp	.+134    	; 0x191e <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1898:	fe 01       	movw	r30, r28
    189a:	ef 5a       	subi	r30, 0xAF	; 175
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	60 81       	ld	r22, Z
    18a0:	71 81       	ldd	r23, Z+1	; 0x01
    18a2:	82 81       	ldd	r24, Z+2	; 0x02
    18a4:	93 81       	ldd	r25, Z+3	; 0x03
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	8e 01       	movw	r16, r28
    18b8:	05 5b       	subi	r16, 0xB5	; 181
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	bc 01       	movw	r22, r24
    18be:	cd 01       	movw	r24, r26
    18c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	f8 01       	movw	r30, r16
    18ca:	91 83       	std	Z+1, r25	; 0x01
    18cc:	80 83       	st	Z, r24
    18ce:	1f c0       	rjmp	.+62     	; 0x190e <LCD_displayCharacter+0x2ba>
    18d0:	fe 01       	movw	r30, r28
    18d2:	e7 5b       	subi	r30, 0xB7	; 183
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	89 e1       	ldi	r24, 0x19	; 25
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	80 83       	st	Z, r24
    18de:	fe 01       	movw	r30, r28
    18e0:	e7 5b       	subi	r30, 0xB7	; 183
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	91 81       	ldd	r25, Z+1	; 0x01
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_displayCharacter+0x294>
    18ec:	fe 01       	movw	r30, r28
    18ee:	e7 5b       	subi	r30, 0xB7	; 183
    18f0:	ff 4f       	sbci	r31, 0xFF	; 255
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f6:	de 01       	movw	r26, r28
    18f8:	a5 5b       	subi	r26, 0xB5	; 181
    18fa:	bf 4f       	sbci	r27, 0xFF	; 255
    18fc:	fe 01       	movw	r30, r28
    18fe:	e5 5b       	subi	r30, 0xB5	; 181
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	11 96       	adiw	r26, 0x01	; 1
    190a:	9c 93       	st	X, r25
    190c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190e:	fe 01       	movw	r30, r28
    1910:	e5 5b       	subi	r30, 0xB5	; 181
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	80 81       	ld	r24, Z
    1916:	91 81       	ldd	r25, Z+1	; 0x01
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	d1 f6       	brne	.-76     	; 0x18d0 <LCD_displayCharacter+0x27c>
    191c:	27 c0       	rjmp	.+78     	; 0x196c <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191e:	8e 01       	movw	r16, r28
    1920:	05 5b       	subi	r16, 0xB5	; 181
    1922:	1f 4f       	sbci	r17, 0xFF	; 255
    1924:	fe 01       	movw	r30, r28
    1926:	e3 5b       	subi	r30, 0xB3	; 179
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	60 81       	ld	r22, Z
    192c:	71 81       	ldd	r23, Z+1	; 0x01
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	f8 01       	movw	r30, r16
    193c:	91 83       	std	Z+1, r25	; 0x01
    193e:	80 83       	st	Z, r24
    1940:	de 01       	movw	r26, r28
    1942:	a9 5b       	subi	r26, 0xB9	; 185
    1944:	bf 4f       	sbci	r27, 0xFF	; 255
    1946:	fe 01       	movw	r30, r28
    1948:	e5 5b       	subi	r30, 0xB5	; 181
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	80 81       	ld	r24, Z
    194e:	91 81       	ldd	r25, Z+1	; 0x01
    1950:	8d 93       	st	X+, r24
    1952:	9c 93       	st	X, r25
    1954:	fe 01       	movw	r30, r28
    1956:	e9 5b       	subi	r30, 0xB9	; 185
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 81       	ld	r24, Z
    195c:	91 81       	ldd	r25, Z+1	; 0x01
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <LCD_displayCharacter+0x30a>
    1962:	fe 01       	movw	r30, r28
    1964:	e9 5b       	subi	r30, 0xB9	; 185
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    196c:	a5 e3       	ldi	r26, 0x35	; 53
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e5 e3       	ldi	r30, 0x35	; 53
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	98 2f       	mov	r25, r24
    1978:	90 7f       	andi	r25, 0xF0	; 240
    197a:	fe 01       	movw	r30, r28
    197c:	ed 59       	subi	r30, 0x9D	; 157
    197e:	ff 4f       	sbci	r31, 0xFF	; 255
    1980:	80 81       	ld	r24, Z
    1982:	82 95       	swap	r24
    1984:	8f 70       	andi	r24, 0x0F	; 15
    1986:	89 2b       	or	r24, r25
    1988:	8c 93       	st	X, r24
    198a:	fe 01       	movw	r30, r28
    198c:	ed 5b       	subi	r30, 0xBD	; 189
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a0 e8       	ldi	r26, 0x80	; 128
    1996:	bf e3       	ldi	r27, 0x3F	; 63
    1998:	80 83       	st	Z, r24
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	a2 83       	std	Z+2, r26	; 0x02
    199e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	8e 01       	movw	r16, r28
    19a2:	01 5c       	subi	r16, 0xC1	; 193
    19a4:	1f 4f       	sbci	r17, 0xFF	; 255
    19a6:	fe 01       	movw	r30, r28
    19a8:	ed 5b       	subi	r30, 0xBD	; 189
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	4a e7       	ldi	r20, 0x7A	; 122
    19ba:	53 e4       	ldi	r21, 0x43	; 67
    19bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	f8 01       	movw	r30, r16
    19c6:	80 83       	st	Z, r24
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	a2 83       	std	Z+2, r26	; 0x02
    19cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19ce:	fe 01       	movw	r30, r28
    19d0:	ff 96       	adiw	r30, 0x3f	; 63
    19d2:	60 81       	ld	r22, Z
    19d4:	71 81       	ldd	r23, Z+1	; 0x01
    19d6:	82 81       	ldd	r24, Z+2	; 0x02
    19d8:	93 81       	ldd	r25, Z+3	; 0x03
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9e af       	std	Y+62, r25	; 0x3e
    19f0:	8d af       	std	Y+61, r24	; 0x3d
    19f2:	46 c0       	rjmp	.+140    	; 0x1a80 <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    19f4:	fe 01       	movw	r30, r28
    19f6:	ff 96       	adiw	r30, 0x3f	; 63
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	3f ef       	ldi	r19, 0xFF	; 255
    1a04:	4f e7       	ldi	r20, 0x7F	; 127
    1a06:	57 e4       	ldi	r21, 0x47	; 71
    1a08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	64 f5       	brge	.+88     	; 0x1a68 <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a10:	fe 01       	movw	r30, r28
    1a12:	ed 5b       	subi	r30, 0xBD	; 189
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e2       	ldi	r20, 0x20	; 32
    1a24:	51 e4       	ldi	r21, 0x41	; 65
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9e af       	std	Y+62, r25	; 0x3e
    1a3c:	8d af       	std	Y+61, r24	; 0x3d
    1a3e:	0f c0       	rjmp	.+30     	; 0x1a5e <LCD_displayCharacter+0x40a>
    1a40:	89 e1       	ldi	r24, 0x19	; 25
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9c af       	std	Y+60, r25	; 0x3c
    1a46:	8b af       	std	Y+59, r24	; 0x3b
    1a48:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a4a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <LCD_displayCharacter+0x3f8>
    1a50:	9c af       	std	Y+60, r25	; 0x3c
    1a52:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a54:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a56:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	9e af       	std	Y+62, r25	; 0x3e
    1a5c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a60:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	69 f7       	brne	.-38     	; 0x1a40 <LCD_displayCharacter+0x3ec>
    1a66:	16 c0       	rjmp	.+44     	; 0x1a94 <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a68:	fe 01       	movw	r30, r28
    1a6a:	ff 96       	adiw	r30, 0x3f	; 63
    1a6c:	60 81       	ld	r22, Z
    1a6e:	71 81       	ldd	r23, Z+1	; 0x01
    1a70:	82 81       	ldd	r24, Z+2	; 0x02
    1a72:	93 81       	ldd	r25, Z+3	; 0x03
    1a74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a78:	dc 01       	movw	r26, r24
    1a7a:	cb 01       	movw	r24, r22
    1a7c:	9e af       	std	Y+62, r25	; 0x3e
    1a7e:	8d af       	std	Y+61, r24	; 0x3d
    1a80:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a82:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a84:	9a af       	std	Y+58, r25	; 0x3a
    1a86:	89 af       	std	Y+57, r24	; 0x39
    1a88:	89 ad       	ldd	r24, Y+57	; 0x39
    1a8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a8c:	01 97       	sbiw	r24, 0x01	; 1
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_displayCharacter+0x438>
    1a90:	9a af       	std	Y+58, r25	; 0x3a
    1a92:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1a94:	a8 e3       	ldi	r26, 0x38	; 56
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e8 e3       	ldi	r30, 0x38	; 56
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	87 7f       	andi	r24, 0xF7	; 247
    1aa0:	8c 93       	st	X, r24
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	a0 e8       	ldi	r26, 0x80	; 128
    1aa8:	bf e3       	ldi	r27, 0x3F	; 63
    1aaa:	8d ab       	std	Y+53, r24	; 0x35
    1aac:	9e ab       	std	Y+54, r25	; 0x36
    1aae:	af ab       	std	Y+55, r26	; 0x37
    1ab0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ab4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ab6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ab8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aba:	20 e0       	ldi	r18, 0x00	; 0
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	4a e7       	ldi	r20, 0x7A	; 122
    1ac0:	53 e4       	ldi	r21, 0x43	; 67
    1ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	cb 01       	movw	r24, r22
    1aca:	89 ab       	std	Y+49, r24	; 0x31
    1acc:	9a ab       	std	Y+50, r25	; 0x32
    1ace:	ab ab       	std	Y+51, r26	; 0x33
    1ad0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ada:	20 e0       	ldi	r18, 0x00	; 0
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	40 e8       	ldi	r20, 0x80	; 128
    1ae0:	5f e3       	ldi	r21, 0x3F	; 63
    1ae2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae6:	88 23       	and	r24, r24
    1ae8:	2c f4       	brge	.+10     	; 0x1af4 <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    1aea:	81 e0       	ldi	r24, 0x01	; 1
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	98 ab       	std	Y+48, r25	; 0x30
    1af0:	8f a7       	std	Y+47, r24	; 0x2f
    1af2:	3f c0       	rjmp	.+126    	; 0x1b72 <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    1af4:	69 a9       	ldd	r22, Y+49	; 0x31
    1af6:	7a a9       	ldd	r23, Y+50	; 0x32
    1af8:	8b a9       	ldd	r24, Y+51	; 0x33
    1afa:	9c a9       	ldd	r25, Y+52	; 0x34
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	3f ef       	ldi	r19, 0xFF	; 255
    1b00:	4f e7       	ldi	r20, 0x7F	; 127
    1b02:	57 e4       	ldi	r21, 0x47	; 71
    1b04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b08:	18 16       	cp	r1, r24
    1b0a:	4c f5       	brge	.+82     	; 0x1b5e <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b10:	8f a9       	ldd	r24, Y+55	; 0x37
    1b12:	98 ad       	ldd	r25, Y+56	; 0x38
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	40 e2       	ldi	r20, 0x20	; 32
    1b1a:	51 e4       	ldi	r21, 0x41	; 65
    1b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	bc 01       	movw	r22, r24
    1b26:	cd 01       	movw	r24, r26
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	98 ab       	std	Y+48, r25	; 0x30
    1b32:	8f a7       	std	Y+47, r24	; 0x2f
    1b34:	0f c0       	rjmp	.+30     	; 0x1b54 <LCD_displayCharacter+0x500>
    1b36:	89 e1       	ldi	r24, 0x19	; 25
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	9e a7       	std	Y+46, r25	; 0x2e
    1b3c:	8d a7       	std	Y+45, r24	; 0x2d
    1b3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b40:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_displayCharacter+0x4ee>
    1b46:	9e a7       	std	Y+46, r25	; 0x2e
    1b48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	98 ab       	std	Y+48, r25	; 0x30
    1b52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b56:	98 a9       	ldd	r25, Y+48	; 0x30
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	69 f7       	brne	.-38     	; 0x1b36 <LCD_displayCharacter+0x4e2>
    1b5c:	14 c0       	rjmp	.+40     	; 0x1b86 <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b60:	7a a9       	ldd	r23, Y+50	; 0x32
    1b62:	8b a9       	ldd	r24, Y+51	; 0x33
    1b64:	9c a9       	ldd	r25, Y+52	; 0x34
    1b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	98 ab       	std	Y+48, r25	; 0x30
    1b70:	8f a7       	std	Y+47, r24	; 0x2f
    1b72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b74:	98 a9       	ldd	r25, Y+48	; 0x30
    1b76:	9c a7       	std	Y+44, r25	; 0x2c
    1b78:	8b a7       	std	Y+43, r24	; 0x2b
    1b7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <LCD_displayCharacter+0x52a>
    1b82:	9c a7       	std	Y+44, r25	; 0x2c
    1b84:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1b86:	a8 e3       	ldi	r26, 0x38	; 56
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e8 e3       	ldi	r30, 0x38	; 56
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	88 60       	ori	r24, 0x08	; 8
    1b92:	8c 93       	st	X, r24
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a0 e8       	ldi	r26, 0x80	; 128
    1b9a:	bf e3       	ldi	r27, 0x3F	; 63
    1b9c:	8f a3       	std	Y+39, r24	; 0x27
    1b9e:	98 a7       	std	Y+40, r25	; 0x28
    1ba0:	a9 a7       	std	Y+41, r26	; 0x29
    1ba2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ba6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ba8:	89 a5       	ldd	r24, Y+41	; 0x29
    1baa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	4a e7       	ldi	r20, 0x7A	; 122
    1bb2:	53 e4       	ldi	r21, 0x43	; 67
    1bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	8b a3       	std	Y+35, r24	; 0x23
    1bbe:	9c a3       	std	Y+36, r25	; 0x24
    1bc0:	ad a3       	std	Y+37, r26	; 0x25
    1bc2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1bc4:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc6:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc8:	8d a1       	ldd	r24, Y+37	; 0x25
    1bca:	9e a1       	ldd	r25, Y+38	; 0x26
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e8       	ldi	r20, 0x80	; 128
    1bd2:	5f e3       	ldi	r21, 0x3F	; 63
    1bd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bd8:	88 23       	and	r24, r24
    1bda:	2c f4       	brge	.+10     	; 0x1be6 <LCD_displayCharacter+0x592>
		__ticks = 1;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9a a3       	std	Y+34, r25	; 0x22
    1be2:	89 a3       	std	Y+33, r24	; 0x21
    1be4:	3f c0       	rjmp	.+126    	; 0x1c64 <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    1be6:	6b a1       	ldd	r22, Y+35	; 0x23
    1be8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bea:	8d a1       	ldd	r24, Y+37	; 0x25
    1bec:	9e a1       	ldd	r25, Y+38	; 0x26
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	3f ef       	ldi	r19, 0xFF	; 255
    1bf2:	4f e7       	ldi	r20, 0x7F	; 127
    1bf4:	57 e4       	ldi	r21, 0x47	; 71
    1bf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	4c f5       	brge	.+82     	; 0x1c50 <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfe:	6f a1       	ldd	r22, Y+39	; 0x27
    1c00:	78 a5       	ldd	r23, Y+40	; 0x28
    1c02:	89 a5       	ldd	r24, Y+41	; 0x29
    1c04:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e2       	ldi	r20, 0x20	; 32
    1c0c:	51 e4       	ldi	r21, 0x41	; 65
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	bc 01       	movw	r22, r24
    1c18:	cd 01       	movw	r24, r26
    1c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	9a a3       	std	Y+34, r25	; 0x22
    1c24:	89 a3       	std	Y+33, r24	; 0x21
    1c26:	0f c0       	rjmp	.+30     	; 0x1c46 <LCD_displayCharacter+0x5f2>
    1c28:	89 e1       	ldi	r24, 0x19	; 25
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	98 a3       	std	Y+32, r25	; 0x20
    1c2e:	8f 8f       	std	Y+31, r24	; 0x1f
    1c30:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c32:	98 a1       	ldd	r25, Y+32	; 0x20
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <LCD_displayCharacter+0x5e0>
    1c38:	98 a3       	std	Y+32, r25	; 0x20
    1c3a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c3e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	9a a3       	std	Y+34, r25	; 0x22
    1c44:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c46:	89 a1       	ldd	r24, Y+33	; 0x21
    1c48:	9a a1       	ldd	r25, Y+34	; 0x22
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	69 f7       	brne	.-38     	; 0x1c28 <LCD_displayCharacter+0x5d4>
    1c4e:	14 c0       	rjmp	.+40     	; 0x1c78 <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c50:	6b a1       	ldd	r22, Y+35	; 0x23
    1c52:	7c a1       	ldd	r23, Y+36	; 0x24
    1c54:	8d a1       	ldd	r24, Y+37	; 0x25
    1c56:	9e a1       	ldd	r25, Y+38	; 0x26
    1c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5c:	dc 01       	movw	r26, r24
    1c5e:	cb 01       	movw	r24, r22
    1c60:	9a a3       	std	Y+34, r25	; 0x22
    1c62:	89 a3       	std	Y+33, r24	; 0x21
    1c64:	89 a1       	ldd	r24, Y+33	; 0x21
    1c66:	9a a1       	ldd	r25, Y+34	; 0x22
    1c68:	9e 8f       	std	Y+30, r25	; 0x1e
    1c6a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <LCD_displayCharacter+0x61c>
    1c74:	9e 8f       	std	Y+30, r25	; 0x1e
    1c76:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    1c78:	a5 e3       	ldi	r26, 0x35	; 53
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	e5 e3       	ldi	r30, 0x35	; 53
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	98 2f       	mov	r25, r24
    1c84:	90 7f       	andi	r25, 0xF0	; 240
    1c86:	fe 01       	movw	r30, r28
    1c88:	ed 59       	subi	r30, 0x9D	; 157
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8f 70       	andi	r24, 0x0F	; 15
    1c90:	89 2b       	or	r24, r25
    1c92:	8c 93       	st	X, r24
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	a0 e8       	ldi	r26, 0x80	; 128
    1c9a:	bf e3       	ldi	r27, 0x3F	; 63
    1c9c:	89 8f       	std	Y+25, r24	; 0x19
    1c9e:	9a 8f       	std	Y+26, r25	; 0x1a
    1ca0:	ab 8f       	std	Y+27, r26	; 0x1b
    1ca2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	4a e7       	ldi	r20, 0x7A	; 122
    1cb2:	53 e4       	ldi	r21, 0x43	; 67
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	8d 8b       	std	Y+21, r24	; 0x15
    1cbe:	9e 8b       	std	Y+22, r25	; 0x16
    1cc0:	af 8b       	std	Y+23, r26	; 0x17
    1cc2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cca:	98 8d       	ldd	r25, Y+24	; 0x18
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e8       	ldi	r20, 0x80	; 128
    1cd2:	5f e3       	ldi	r21, 0x3F	; 63
    1cd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd8:	88 23       	and	r24, r24
    1cda:	2c f4       	brge	.+10     	; 0x1ce6 <LCD_displayCharacter+0x692>
		__ticks = 1;
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9c 8b       	std	Y+20, r25	; 0x14
    1ce2:	8b 8b       	std	Y+19, r24	; 0x13
    1ce4:	3f c0       	rjmp	.+126    	; 0x1d64 <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    1ce6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ce8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cea:	8f 89       	ldd	r24, Y+23	; 0x17
    1cec:	98 8d       	ldd	r25, Y+24	; 0x18
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	3f ef       	ldi	r19, 0xFF	; 255
    1cf2:	4f e7       	ldi	r20, 0x7F	; 127
    1cf4:	57 e4       	ldi	r21, 0x47	; 71
    1cf6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfa:	18 16       	cp	r1, r24
    1cfc:	4c f5       	brge	.+82     	; 0x1d50 <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cfe:	69 8d       	ldd	r22, Y+25	; 0x19
    1d00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 e2       	ldi	r20, 0x20	; 32
    1d0c:	51 e4       	ldi	r21, 0x41	; 65
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9c 8b       	std	Y+20, r25	; 0x14
    1d24:	8b 8b       	std	Y+19, r24	; 0x13
    1d26:	0f c0       	rjmp	.+30     	; 0x1d46 <LCD_displayCharacter+0x6f2>
    1d28:	89 e1       	ldi	r24, 0x19	; 25
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	9a 8b       	std	Y+18, r25	; 0x12
    1d2e:	89 8b       	std	Y+17, r24	; 0x11
    1d30:	89 89       	ldd	r24, Y+17	; 0x11
    1d32:	9a 89       	ldd	r25, Y+18	; 0x12
    1d34:	01 97       	sbiw	r24, 0x01	; 1
    1d36:	f1 f7       	brne	.-4      	; 0x1d34 <LCD_displayCharacter+0x6e0>
    1d38:	9a 8b       	std	Y+18, r25	; 0x12
    1d3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	9c 8b       	std	Y+20, r25	; 0x14
    1d44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d46:	8b 89       	ldd	r24, Y+19	; 0x13
    1d48:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4a:	00 97       	sbiw	r24, 0x00	; 0
    1d4c:	69 f7       	brne	.-38     	; 0x1d28 <LCD_displayCharacter+0x6d4>
    1d4e:	14 c0       	rjmp	.+40     	; 0x1d78 <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d50:	6d 89       	ldd	r22, Y+21	; 0x15
    1d52:	7e 89       	ldd	r23, Y+22	; 0x16
    1d54:	8f 89       	ldd	r24, Y+23	; 0x17
    1d56:	98 8d       	ldd	r25, Y+24	; 0x18
    1d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	9c 8b       	std	Y+20, r25	; 0x14
    1d62:	8b 8b       	std	Y+19, r24	; 0x13
    1d64:	8b 89       	ldd	r24, Y+19	; 0x13
    1d66:	9c 89       	ldd	r25, Y+20	; 0x14
    1d68:	98 8b       	std	Y+16, r25	; 0x10
    1d6a:	8f 87       	std	Y+15, r24	; 0x0f
    1d6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d6e:	98 89       	ldd	r25, Y+16	; 0x10
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	f1 f7       	brne	.-4      	; 0x1d70 <LCD_displayCharacter+0x71c>
    1d74:	98 8b       	std	Y+16, r25	; 0x10
    1d76:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1d78:	a8 e3       	ldi	r26, 0x38	; 56
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e8 e3       	ldi	r30, 0x38	; 56
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	87 7f       	andi	r24, 0xF7	; 247
    1d84:	8c 93       	st	X, r24
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	a0 e8       	ldi	r26, 0x80	; 128
    1d8c:	bf e3       	ldi	r27, 0x3F	; 63
    1d8e:	8b 87       	std	Y+11, r24	; 0x0b
    1d90:	9c 87       	std	Y+12, r25	; 0x0c
    1d92:	ad 87       	std	Y+13, r26	; 0x0d
    1d94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	4a e7       	ldi	r20, 0x7A	; 122
    1da4:	53 e4       	ldi	r21, 0x43	; 67
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	8f 83       	std	Y+7, r24	; 0x07
    1db0:	98 87       	std	Y+8, r25	; 0x08
    1db2:	a9 87       	std	Y+9, r26	; 0x09
    1db4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1db6:	6f 81       	ldd	r22, Y+7	; 0x07
    1db8:	78 85       	ldd	r23, Y+8	; 0x08
    1dba:	89 85       	ldd	r24, Y+9	; 0x09
    1dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e8       	ldi	r20, 0x80	; 128
    1dc4:	5f e3       	ldi	r21, 0x3F	; 63
    1dc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dca:	88 23       	and	r24, r24
    1dcc:	2c f4       	brge	.+10     	; 0x1dd8 <LCD_displayCharacter+0x784>
		__ticks = 1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	3f c0       	rjmp	.+126    	; 0x1e56 <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    1dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1dda:	78 85       	ldd	r23, Y+8	; 0x08
    1ddc:	89 85       	ldd	r24, Y+9	; 0x09
    1dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	3f ef       	ldi	r19, 0xFF	; 255
    1de4:	4f e7       	ldi	r20, 0x7F	; 127
    1de6:	57 e4       	ldi	r21, 0x47	; 71
    1de8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dec:	18 16       	cp	r1, r24
    1dee:	4c f5       	brge	.+82     	; 0x1e42 <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e2       	ldi	r20, 0x20	; 32
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	cd 01       	movw	r24, r26
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	9e 83       	std	Y+6, r25	; 0x06
    1e16:	8d 83       	std	Y+5, r24	; 0x05
    1e18:	0f c0       	rjmp	.+30     	; 0x1e38 <LCD_displayCharacter+0x7e4>
    1e1a:	89 e1       	ldi	r24, 0x19	; 25
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9c 83       	std	Y+4, r25	; 0x04
    1e20:	8b 83       	std	Y+3, r24	; 0x03
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	9c 81       	ldd	r25, Y+4	; 0x04
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_displayCharacter+0x7d2>
    1e2a:	9c 83       	std	Y+4, r25	; 0x04
    1e2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e30:	9e 81       	ldd	r25, Y+6	; 0x06
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	9e 83       	std	Y+6, r25	; 0x06
    1e36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	00 97       	sbiw	r24, 0x00	; 0
    1e3e:	69 f7       	brne	.-38     	; 0x1e1a <LCD_displayCharacter+0x7c6>
    1e40:	14 c0       	rjmp	.+40     	; 0x1e6a <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e42:	6f 81       	ldd	r22, Y+7	; 0x07
    1e44:	78 85       	ldd	r23, Y+8	; 0x08
    1e46:	89 85       	ldd	r24, Y+9	; 0x09
    1e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	9a 81       	ldd	r25, Y+2	; 0x02
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <LCD_displayCharacter+0x80e>
    1e66:	9a 83       	std	Y+2, r25	; 0x02
    1e68:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1e6a:	cd 59       	subi	r28, 0x9D	; 157
    1e6c:	df 4f       	sbci	r29, 0xFF	; 255
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	08 95       	ret

00001e82 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <LCD_displayString+0x6>
    1e88:	0f 92       	push	r0
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	9b 83       	std	Y+3, r25	; 0x03
    1e90:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e92:	19 82       	std	Y+1, r1	; 0x01
    1e94:	0e c0       	rjmp	.+28     	; 0x1eb2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	e2 0f       	add	r30, r18
    1ea4:	f3 1f       	adc	r31, r19
    1ea6:	80 81       	ld	r24, Z
    1ea8:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayCharacter>
		i++;
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	8f 5f       	subi	r24, 0xFF	; 255
    1eb0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	28 2f       	mov	r18, r24
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	e2 0f       	add	r30, r18
    1ec0:	f3 1f       	adc	r31, r19
    1ec2:	80 81       	ld	r24, Z
    1ec4:	88 23       	and	r24, r24
    1ec6:	39 f7       	brne	.-50     	; 0x1e96 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	0f 90       	pop	r0
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <LCD_goToRowColumn+0x6>
    1eda:	00 d0       	rcall	.+0      	; 0x1edc <LCD_goToRowColumn+0x8>
    1edc:	0f 92       	push	r0
    1ede:	cd b7       	in	r28, 0x3d	; 61
    1ee0:	de b7       	in	r29, 0x3e	; 62
    1ee2:	8a 83       	std	Y+2, r24	; 0x02
    1ee4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	3d 83       	std	Y+5, r19	; 0x05
    1eee:	2c 83       	std	Y+4, r18	; 0x04
    1ef0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef4:	81 30       	cpi	r24, 0x01	; 1
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	c1 f0       	breq	.+48     	; 0x1f2a <LCD_goToRowColumn+0x56>
    1efa:	2c 81       	ldd	r18, Y+4	; 0x04
    1efc:	3d 81       	ldd	r19, Y+5	; 0x05
    1efe:	22 30       	cpi	r18, 0x02	; 2
    1f00:	31 05       	cpc	r19, r1
    1f02:	2c f4       	brge	.+10     	; 0x1f0e <LCD_goToRowColumn+0x3a>
    1f04:	8c 81       	ldd	r24, Y+4	; 0x04
    1f06:	9d 81       	ldd	r25, Y+5	; 0x05
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	61 f0       	breq	.+24     	; 0x1f24 <LCD_goToRowColumn+0x50>
    1f0c:	19 c0       	rjmp	.+50     	; 0x1f40 <LCD_goToRowColumn+0x6c>
    1f0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1f10:	3d 81       	ldd	r19, Y+5	; 0x05
    1f12:	22 30       	cpi	r18, 0x02	; 2
    1f14:	31 05       	cpc	r19, r1
    1f16:	69 f0       	breq	.+26     	; 0x1f32 <LCD_goToRowColumn+0x5e>
    1f18:	8c 81       	ldd	r24, Y+4	; 0x04
    1f1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1c:	83 30       	cpi	r24, 0x03	; 3
    1f1e:	91 05       	cpc	r25, r1
    1f20:	61 f0       	breq	.+24     	; 0x1f3a <LCD_goToRowColumn+0x66>
    1f22:	0e c0       	rjmp	.+28     	; 0x1f40 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	0b c0       	rjmp	.+22     	; 0x1f40 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	80 5c       	subi	r24, 0xC0	; 192
    1f2e:	89 83       	std	Y+1, r24	; 0x01
    1f30:	07 c0       	rjmp	.+14     	; 0x1f40 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	80 5f       	subi	r24, 0xF0	; 240
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	03 c0       	rjmp	.+6      	; 0x1f40 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	80 5b       	subi	r24, 0xB0	; 176
    1f3e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	80 68       	ori	r24, 0x80	; 128
    1f44:	0e 94 13 07 	call	0xe26	; 0xe26 <LCD_sendCommand>
}
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <LCD_displayStringRowColumn+0x6>
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <LCD_displayStringRowColumn+0x8>
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	89 83       	std	Y+1, r24	; 0x01
    1f66:	6a 83       	std	Y+2, r22	; 0x02
    1f68:	5c 83       	std	Y+4, r21	; 0x04
    1f6a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	6a 81       	ldd	r22, Y+2	; 0x02
    1f70:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    1f74:	8b 81       	ldd	r24, Y+3	; 0x03
    1f76:	9c 81       	ldd	r25, Y+4	; 0x04
    1f78:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_displayString>
}
    1f7c:	0f 90       	pop	r0
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	cf 91       	pop	r28
    1f86:	df 91       	pop	r29
    1f88:	08 95       	ret

00001f8a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    1f8a:	df 93       	push	r29
    1f8c:	cf 93       	push	r28
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	62 97       	sbiw	r28, 0x12	; 18
    1f94:	0f b6       	in	r0, 0x3f	; 63
    1f96:	f8 94       	cli
    1f98:	de bf       	out	0x3e, r29	; 62
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	cd bf       	out	0x3d, r28	; 61
    1f9e:	9a 8b       	std	Y+18, r25	; 0x12
    1fa0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    1fa2:	89 89       	ldd	r24, Y+17	; 0x11
    1fa4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa6:	9e 01       	movw	r18, r28
    1fa8:	2f 5f       	subi	r18, 0xFF	; 255
    1faa:	3f 4f       	sbci	r19, 0xFF	; 255
    1fac:	b9 01       	movw	r22, r18
    1fae:	4a e0       	ldi	r20, 0x0A	; 10
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	0e 94 ee 11 	call	0x23dc	; 0x23dc <itoa>
   LCD_displayString(buff);
    1fb6:	ce 01       	movw	r24, r28
    1fb8:	01 96       	adiw	r24, 0x01	; 1
    1fba:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_displayString>
}
    1fbe:	62 96       	adiw	r28, 0x12	; 18
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	0e 94 13 07 	call	0xe26	; 0xe26 <LCD_sendCommand>
}
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <main>:
#include "keypad.h"
#include "uart.h"


int main(void)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	6d 97       	sbiw	r28, 0x1d	; 29
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61

	uint8 key;

	/* Device Drivers Initialization */
	UART_init();
    1ff8:	0e 94 0b 11 	call	0x2216	; 0x2216 <UART_init>
	LCD_init();
    1ffc:	0e 94 f2 06 	call	0xde4	; 0xde4 <LCD_init>
	LCD_clearScreen(); /* clear LCD at the beginning */
    2000:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <LCD_clearScreen>

	LCD_displayStringRowColumn(0,0,"Enter your");
    2004:	20 e6       	ldi	r18, 0x60	; 96
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	a9 01       	movw	r20, r18
    200e:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Credentials");
    2012:	2b e6       	ldi	r18, 0x6B	; 107
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	60 e0       	ldi	r22, 0x00	; 0
    201a:	a9 01       	movw	r20, r18
    201c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <LCD_displayStringRowColumn>
//	LCD_displayStringRowColumn(2,0,"LCD");
	LCD_goToRowColumn(3,0);
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <LCD_goToRowColumn>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	aa ef       	ldi	r26, 0xFA	; 250
    202e:	b3 e4       	ldi	r27, 0x43	; 67
    2030:	89 8f       	std	Y+25, r24	; 0x19
    2032:	9a 8f       	std	Y+26, r25	; 0x1a
    2034:	ab 8f       	std	Y+27, r26	; 0x1b
    2036:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2038:	69 8d       	ldd	r22, Y+25	; 0x19
    203a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4a e7       	ldi	r20, 0x7A	; 122
    2046:	53 e4       	ldi	r21, 0x43	; 67
    2048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	8d 8b       	std	Y+21, r24	; 0x15
    2052:	9e 8b       	std	Y+22, r25	; 0x16
    2054:	af 8b       	std	Y+23, r26	; 0x17
    2056:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2058:	6d 89       	ldd	r22, Y+21	; 0x15
    205a:	7e 89       	ldd	r23, Y+22	; 0x16
    205c:	8f 89       	ldd	r24, Y+23	; 0x17
    205e:	98 8d       	ldd	r25, Y+24	; 0x18
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e8       	ldi	r20, 0x80	; 128
    2066:	5f e3       	ldi	r21, 0x3F	; 63
    2068:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206c:	88 23       	and	r24, r24
    206e:	2c f4       	brge	.+10     	; 0x207a <main+0x96>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9c 8b       	std	Y+20, r25	; 0x14
    2076:	8b 8b       	std	Y+19, r24	; 0x13
    2078:	3f c0       	rjmp	.+126    	; 0x20f8 <main+0x114>
	else if (__tmp > 65535)
    207a:	6d 89       	ldd	r22, Y+21	; 0x15
    207c:	7e 89       	ldd	r23, Y+22	; 0x16
    207e:	8f 89       	ldd	r24, Y+23	; 0x17
    2080:	98 8d       	ldd	r25, Y+24	; 0x18
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	3f ef       	ldi	r19, 0xFF	; 255
    2086:	4f e7       	ldi	r20, 0x7F	; 127
    2088:	57 e4       	ldi	r21, 0x47	; 71
    208a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    208e:	18 16       	cp	r1, r24
    2090:	4c f5       	brge	.+82     	; 0x20e4 <main+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2092:	69 8d       	ldd	r22, Y+25	; 0x19
    2094:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2096:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2098:	9c 8d       	ldd	r25, Y+28	; 0x1c
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	bc 01       	movw	r22, r24
    20ac:	cd 01       	movw	r24, r26
    20ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	9c 8b       	std	Y+20, r25	; 0x14
    20b8:	8b 8b       	std	Y+19, r24	; 0x13
    20ba:	0f c0       	rjmp	.+30     	; 0x20da <main+0xf6>
    20bc:	89 e1       	ldi	r24, 0x19	; 25
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9a 8b       	std	Y+18, r25	; 0x12
    20c2:	89 8b       	std	Y+17, r24	; 0x11
    20c4:	89 89       	ldd	r24, Y+17	; 0x11
    20c6:	9a 89       	ldd	r25, Y+18	; 0x12
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <main+0xe4>
    20cc:	9a 8b       	std	Y+18, r25	; 0x12
    20ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d0:	8b 89       	ldd	r24, Y+19	; 0x13
    20d2:	9c 89       	ldd	r25, Y+20	; 0x14
    20d4:	01 97       	sbiw	r24, 0x01	; 1
    20d6:	9c 8b       	std	Y+20, r25	; 0x14
    20d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	8b 89       	ldd	r24, Y+19	; 0x13
    20dc:	9c 89       	ldd	r25, Y+20	; 0x14
    20de:	00 97       	sbiw	r24, 0x00	; 0
    20e0:	69 f7       	brne	.-38     	; 0x20bc <main+0xd8>
    20e2:	14 c0       	rjmp	.+40     	; 0x210c <main+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e4:	6d 89       	ldd	r22, Y+21	; 0x15
    20e6:	7e 89       	ldd	r23, Y+22	; 0x16
    20e8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ea:	98 8d       	ldd	r25, Y+24	; 0x18
    20ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	9c 8b       	std	Y+20, r25	; 0x14
    20f6:	8b 8b       	std	Y+19, r24	; 0x13
    20f8:	8b 89       	ldd	r24, Y+19	; 0x13
    20fa:	9c 89       	ldd	r25, Y+20	; 0x14
    20fc:	98 8b       	std	Y+16, r25	; 0x10
    20fe:	8f 87       	std	Y+15, r24	; 0x0f
    2100:	8f 85       	ldd	r24, Y+15	; 0x0f
    2102:	98 89       	ldd	r25, Y+16	; 0x10
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	f1 f7       	brne	.-4      	; 0x2104 <main+0x120>
    2108:	98 8b       	std	Y+16, r25	; 0x10
    210a:	8f 87       	std	Y+15, r24	; 0x0f

    while(1)
    {
    	_delay_ms(500); /* Press time */
    	/* if any switch pressed for more than 500 ms it counts more than one press */
		key = KeyPad_getPressedKey(); /* get the pressed key number */
    210c:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <KeyPad_getPressedKey>
    2110:	8d 8f       	std	Y+29, r24	; 0x1d
		if((key <= 9) && (key >= 0))
    2112:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2114:	8a 30       	cpi	r24, 0x0A	; 10
    2116:	30 f4       	brcc	.+12     	; 0x2124 <main+0x140>
		{
			LCD_intgerToString(key); /* display the pressed keypad switch */
    2118:	8d 8d       	ldd	r24, Y+29	; 0x1d
    211a:	88 2f       	mov	r24, r24
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <LCD_intgerToString>
    2122:	03 c0       	rjmp	.+6      	; 0x212a <main+0x146>
		}
		else
		{
			LCD_displayCharacter(key); /* display the pressed keypad switch */
    2124:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2126:	0e 94 2a 0b 	call	0x1654	; 0x1654 <LCD_displayCharacter>
		}


		UART_sendByte(key); //send the pressed key to the second MC using uart
    212a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    212c:	0e 94 25 11 	call	0x224a	; 0x224a <UART_sendByte>
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	aa ef       	ldi	r26, 0xFA	; 250
    2136:	b3 e4       	ldi	r27, 0x43	; 67
    2138:	8b 87       	std	Y+11, r24	; 0x0b
    213a:	9c 87       	std	Y+12, r25	; 0x0c
    213c:	ad 87       	std	Y+13, r26	; 0x0d
    213e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2140:	6b 85       	ldd	r22, Y+11	; 0x0b
    2142:	7c 85       	ldd	r23, Y+12	; 0x0c
    2144:	8d 85       	ldd	r24, Y+13	; 0x0d
    2146:	9e 85       	ldd	r25, Y+14	; 0x0e
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	4a e7       	ldi	r20, 0x7A	; 122
    214e:	53 e4       	ldi	r21, 0x43	; 67
    2150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	8f 83       	std	Y+7, r24	; 0x07
    215a:	98 87       	std	Y+8, r25	; 0x08
    215c:	a9 87       	std	Y+9, r26	; 0x09
    215e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2160:	6f 81       	ldd	r22, Y+7	; 0x07
    2162:	78 85       	ldd	r23, Y+8	; 0x08
    2164:	89 85       	ldd	r24, Y+9	; 0x09
    2166:	9a 85       	ldd	r25, Y+10	; 0x0a
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e8       	ldi	r20, 0x80	; 128
    216e:	5f e3       	ldi	r21, 0x3F	; 63
    2170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2174:	88 23       	and	r24, r24
    2176:	2c f4       	brge	.+10     	; 0x2182 <main+0x19e>
		__ticks = 1;
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	9e 83       	std	Y+6, r25	; 0x06
    217e:	8d 83       	std	Y+5, r24	; 0x05
    2180:	3f c0       	rjmp	.+126    	; 0x2200 <main+0x21c>
	else if (__tmp > 65535)
    2182:	6f 81       	ldd	r22, Y+7	; 0x07
    2184:	78 85       	ldd	r23, Y+8	; 0x08
    2186:	89 85       	ldd	r24, Y+9	; 0x09
    2188:	9a 85       	ldd	r25, Y+10	; 0x0a
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	3f ef       	ldi	r19, 0xFF	; 255
    218e:	4f e7       	ldi	r20, 0x7F	; 127
    2190:	57 e4       	ldi	r21, 0x47	; 71
    2192:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2196:	18 16       	cp	r1, r24
    2198:	4c f5       	brge	.+82     	; 0x21ec <main+0x208>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219a:	6b 85       	ldd	r22, Y+11	; 0x0b
    219c:	7c 85       	ldd	r23, Y+12	; 0x0c
    219e:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e2       	ldi	r20, 0x20	; 32
    21a8:	51 e4       	ldi	r21, 0x41	; 65
    21aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9e 83       	std	Y+6, r25	; 0x06
    21c0:	8d 83       	std	Y+5, r24	; 0x05
    21c2:	0f c0       	rjmp	.+30     	; 0x21e2 <main+0x1fe>
    21c4:	89 e1       	ldi	r24, 0x19	; 25
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	9c 83       	std	Y+4, r25	; 0x04
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	01 97       	sbiw	r24, 0x01	; 1
    21d2:	f1 f7       	brne	.-4      	; 0x21d0 <main+0x1ec>
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	00 97       	sbiw	r24, 0x00	; 0
    21e8:	69 f7       	brne	.-38     	; 0x21c4 <main+0x1e0>
    21ea:	1e cf       	rjmp	.-452    	; 0x2028 <main+0x44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ec:	6f 81       	ldd	r22, Y+7	; 0x07
    21ee:	78 85       	ldd	r23, Y+8	; 0x08
    21f0:	89 85       	ldd	r24, Y+9	; 0x09
    21f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	8d 83       	std	Y+5, r24	; 0x05
    2200:	8d 81       	ldd	r24, Y+5	; 0x05
    2202:	9e 81       	ldd	r25, Y+6	; 0x06
    2204:	9a 83       	std	Y+2, r25	; 0x02
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	9a 81       	ldd	r25, Y+2	; 0x02
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	f1 f7       	brne	.-4      	; 0x220c <main+0x228>
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	09 cf       	rjmp	.-494    	; 0x2028 <main+0x44>

00002216 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2216:	df 93       	push	r29
    2218:	cf 93       	push	r28
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    221e:	eb e2       	ldi	r30, 0x2B	; 43
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	82 e0       	ldi	r24, 0x02	; 2
    2224:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2226:	ea e2       	ldi	r30, 0x2A	; 42
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	88 e1       	ldi	r24, 0x18	; 24
    222c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    222e:	e0 e4       	ldi	r30, 0x40	; 64
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	86 e8       	ldi	r24, 0x86	; 134
    2234:	80 83       	st	Z, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2236:	e0 e4       	ldi	r30, 0x40	; 64
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    223c:	e9 e2       	ldi	r30, 0x29	; 41
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	8c e0       	ldi	r24, 0x0C	; 12
    2242:	80 83       	st	Z, r24
}
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	0f 92       	push	r0
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2256:	eb e2       	ldi	r30, 0x2B	; 43
    2258:	f0 e0       	ldi	r31, 0x00	; 0
    225a:	80 81       	ld	r24, Z
    225c:	88 2f       	mov	r24, r24
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	80 72       	andi	r24, 0x20	; 32
    2262:	90 70       	andi	r25, 0x00	; 0
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	b9 f3       	breq	.-18     	; 0x2256 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    2268:	ec e2       	ldi	r30, 0x2C	; 44
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	cd b7       	in	r28, 0x3d	; 61
    227e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2280:	eb e2       	ldi	r30, 0x2B	; 43
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	88 23       	and	r24, r24
    2288:	dc f7       	brge	.-10     	; 0x2280 <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    228a:	ec e2       	ldi	r30, 0x2C	; 44
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
}
    2290:	cf 91       	pop	r28
    2292:	df 91       	pop	r29
    2294:	08 95       	ret

00002296 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    2296:	df 93       	push	r29
    2298:	cf 93       	push	r28
    229a:	00 d0       	rcall	.+0      	; 0x229c <UART_sendString+0x6>
    229c:	0f 92       	push	r0
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62
    22a2:	9b 83       	std	Y+3, r25	; 0x03
    22a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22a6:	19 82       	std	Y+1, r1	; 0x01
    22a8:	0e c0       	rjmp	.+28     	; 0x22c6 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	9b 81       	ldd	r25, Y+3	; 0x03
    22b4:	fc 01       	movw	r30, r24
    22b6:	e2 0f       	add	r30, r18
    22b8:	f3 1f       	adc	r31, r19
    22ba:	80 81       	ld	r24, Z
    22bc:	0e 94 25 11 	call	0x224a	; 0x224a <UART_sendByte>
		i++;
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
    22c2:	8f 5f       	subi	r24, 0xFF	; 255
    22c4:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	28 2f       	mov	r18, r24
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	fc 01       	movw	r30, r24
    22d2:	e2 0f       	add	r30, r18
    22d4:	f3 1f       	adc	r31, r19
    22d6:	80 81       	ld	r24, Z
    22d8:	88 23       	and	r24, r24
    22da:	39 f7       	brne	.-50     	; 0x22aa <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <UART_receiveString+0xa>
    22f2:	0f 92       	push	r0
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	9b 83       	std	Y+3, r25	; 0x03
    22fa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22fc:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	9b 81       	ldd	r25, Y+3	; 0x03
    2308:	8c 01       	movw	r16, r24
    230a:	02 0f       	add	r16, r18
    230c:	13 1f       	adc	r17, r19
    230e:	0e 94 3c 11 	call	0x2278	; 0x2278 <UART_recieveByte>
    2312:	f8 01       	movw	r30, r16
    2314:	80 83       	st	Z, r24
    2316:	0f c0       	rjmp	.+30     	; 0x2336 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	8f 5f       	subi	r24, 0xFF	; 255
    231c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	28 2f       	mov	r18, r24
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	9b 81       	ldd	r25, Y+3	; 0x03
    2328:	8c 01       	movw	r16, r24
    232a:	02 0f       	add	r16, r18
    232c:	13 1f       	adc	r17, r19
    232e:	0e 94 3c 11 	call	0x2278	; 0x2278 <UART_recieveByte>
    2332:	f8 01       	movw	r30, r16
    2334:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	9b 81       	ldd	r25, Y+3	; 0x03
    2340:	fc 01       	movw	r30, r24
    2342:	e2 0f       	add	r30, r18
    2344:	f3 1f       	adc	r31, r19
    2346:	80 81       	ld	r24, Z
    2348:	83 32       	cpi	r24, 0x23	; 35
    234a:	31 f7       	brne	.-52     	; 0x2318 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	28 2f       	mov	r18, r24
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	8a 81       	ldd	r24, Y+2	; 0x02
    2354:	9b 81       	ldd	r25, Y+3	; 0x03
    2356:	fc 01       	movw	r30, r24
    2358:	e2 0f       	add	r30, r18
    235a:	f3 1f       	adc	r31, r19
    235c:	10 82       	st	Z, r1
}
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	cf 91       	pop	r28
    2366:	df 91       	pop	r29
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	08 95       	ret

0000236e <__prologue_saves__>:
    236e:	2f 92       	push	r2
    2370:	3f 92       	push	r3
    2372:	4f 92       	push	r4
    2374:	5f 92       	push	r5
    2376:	6f 92       	push	r6
    2378:	7f 92       	push	r7
    237a:	8f 92       	push	r8
    237c:	9f 92       	push	r9
    237e:	af 92       	push	r10
    2380:	bf 92       	push	r11
    2382:	cf 92       	push	r12
    2384:	df 92       	push	r13
    2386:	ef 92       	push	r14
    2388:	ff 92       	push	r15
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	ca 1b       	sub	r28, r26
    2398:	db 0b       	sbc	r29, r27
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	09 94       	ijmp

000023a6 <__epilogue_restores__>:
    23a6:	2a 88       	ldd	r2, Y+18	; 0x12
    23a8:	39 88       	ldd	r3, Y+17	; 0x11
    23aa:	48 88       	ldd	r4, Y+16	; 0x10
    23ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    23ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    23b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    23b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    23b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    23b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    23b8:	b9 84       	ldd	r11, Y+9	; 0x09
    23ba:	c8 84       	ldd	r12, Y+8	; 0x08
    23bc:	df 80       	ldd	r13, Y+7	; 0x07
    23be:	ee 80       	ldd	r14, Y+6	; 0x06
    23c0:	fd 80       	ldd	r15, Y+5	; 0x05
    23c2:	0c 81       	ldd	r16, Y+4	; 0x04
    23c4:	1b 81       	ldd	r17, Y+3	; 0x03
    23c6:	aa 81       	ldd	r26, Y+2	; 0x02
    23c8:	b9 81       	ldd	r27, Y+1	; 0x01
    23ca:	ce 0f       	add	r28, r30
    23cc:	d1 1d       	adc	r29, r1
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	ed 01       	movw	r28, r26
    23da:	08 95       	ret

000023dc <itoa>:
    23dc:	fb 01       	movw	r30, r22
    23de:	9f 01       	movw	r18, r30
    23e0:	e8 94       	clt
    23e2:	42 30       	cpi	r20, 0x02	; 2
    23e4:	c4 f0       	brlt	.+48     	; 0x2416 <itoa+0x3a>
    23e6:	45 32       	cpi	r20, 0x25	; 37
    23e8:	b4 f4       	brge	.+44     	; 0x2416 <itoa+0x3a>
    23ea:	4a 30       	cpi	r20, 0x0A	; 10
    23ec:	29 f4       	brne	.+10     	; 0x23f8 <itoa+0x1c>
    23ee:	97 fb       	bst	r25, 7
    23f0:	1e f4       	brtc	.+6      	; 0x23f8 <itoa+0x1c>
    23f2:	90 95       	com	r25
    23f4:	81 95       	neg	r24
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	64 2f       	mov	r22, r20
    23fa:	77 27       	eor	r23, r23
    23fc:	0e 94 1f 12 	call	0x243e	; 0x243e <__udivmodhi4>
    2400:	80 5d       	subi	r24, 0xD0	; 208
    2402:	8a 33       	cpi	r24, 0x3A	; 58
    2404:	0c f0       	brlt	.+2      	; 0x2408 <itoa+0x2c>
    2406:	89 5d       	subi	r24, 0xD9	; 217
    2408:	81 93       	st	Z+, r24
    240a:	cb 01       	movw	r24, r22
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	a1 f7       	brne	.-24     	; 0x23f8 <itoa+0x1c>
    2410:	16 f4       	brtc	.+4      	; 0x2416 <itoa+0x3a>
    2412:	5d e2       	ldi	r21, 0x2D	; 45
    2414:	51 93       	st	Z+, r21
    2416:	10 82       	st	Z, r1
    2418:	c9 01       	movw	r24, r18
    241a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <strrev>

0000241e <strrev>:
    241e:	dc 01       	movw	r26, r24
    2420:	fc 01       	movw	r30, r24
    2422:	67 2f       	mov	r22, r23
    2424:	71 91       	ld	r23, Z+
    2426:	77 23       	and	r23, r23
    2428:	e1 f7       	brne	.-8      	; 0x2422 <strrev+0x4>
    242a:	32 97       	sbiw	r30, 0x02	; 2
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <strrev+0x18>
    242e:	7c 91       	ld	r23, X
    2430:	6d 93       	st	X+, r22
    2432:	70 83       	st	Z, r23
    2434:	62 91       	ld	r22, -Z
    2436:	ae 17       	cp	r26, r30
    2438:	bf 07       	cpc	r27, r31
    243a:	c8 f3       	brcs	.-14     	; 0x242e <strrev+0x10>
    243c:	08 95       	ret

0000243e <__udivmodhi4>:
    243e:	aa 1b       	sub	r26, r26
    2440:	bb 1b       	sub	r27, r27
    2442:	51 e1       	ldi	r21, 0x11	; 17
    2444:	07 c0       	rjmp	.+14     	; 0x2454 <__udivmodhi4_ep>

00002446 <__udivmodhi4_loop>:
    2446:	aa 1f       	adc	r26, r26
    2448:	bb 1f       	adc	r27, r27
    244a:	a6 17       	cp	r26, r22
    244c:	b7 07       	cpc	r27, r23
    244e:	10 f0       	brcs	.+4      	; 0x2454 <__udivmodhi4_ep>
    2450:	a6 1b       	sub	r26, r22
    2452:	b7 0b       	sbc	r27, r23

00002454 <__udivmodhi4_ep>:
    2454:	88 1f       	adc	r24, r24
    2456:	99 1f       	adc	r25, r25
    2458:	5a 95       	dec	r21
    245a:	a9 f7       	brne	.-22     	; 0x2446 <__udivmodhi4_loop>
    245c:	80 95       	com	r24
    245e:	90 95       	com	r25
    2460:	bc 01       	movw	r22, r24
    2462:	cd 01       	movw	r24, r26
    2464:	08 95       	ret

00002466 <_exit>:
    2466:	f8 94       	cli

00002468 <__stop_program>:
    2468:	ff cf       	rjmp	.-2      	; 0x2468 <__stop_program>
